# Generated by Django 4.2.10 on 2025-04-05 12:23

import accounts_payable.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts_receivable', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountPayable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_date', models.DateField(default=datetime.date.today, verbose_name='transaction date')),
                ('due_date', models.DateField(verbose_name='due date')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='amount')),
                ('check_number', models.CharField(max_length=50, verbose_name='check number')),
                ('payment_number', models.CharField(default=accounts_payable.models.AccountPayable.generate_payment_number, editable=False, max_length=20, unique=True, verbose_name='payment number')),
                ('invoice_number', models.CharField(blank=True, max_length=50, verbose_name='invoice number')),
                ('invoice_date', models.DateField(blank=True, null=True, verbose_name='invoice date')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_process', 'In-Process'), ('paid', 'Paid'), ('delayed', 'Delayed')], default='scheduled', max_length=20, verbose_name='status')),
                ('notes', models.TextField(blank=True, max_length=500, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('last_reminder_date', models.DateField(blank=True, null=True, verbose_name='last reminder date')),
                ('bank', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payables', to='accounts_receivable.bank', verbose_name='bank')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_payables', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'account payable',
                'verbose_name_plural': 'accounts payable',
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='supplier name')),
                ('arabic_name', models.CharField(blank=True, max_length=200, verbose_name='supplier name (Arabic)')),
                ('contact_person', models.CharField(blank=True, max_length=100, verbose_name='contact person')),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')], verbose_name='phone')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('address', models.TextField(blank=True, verbose_name='address')),
                ('tax_number', models.CharField(blank=True, max_length=50, verbose_name='tax number')),
                ('payment_terms', models.PositiveIntegerField(default=60, verbose_name='payment terms (days)')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('notes', models.TextField(blank=True, max_length=500, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_suppliers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'supplier',
                'verbose_name_plural': 'suppliers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PayableTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('partial_payment', 'Partial Payment'), ('full_payment', 'Full Payment'), ('adjustment', 'Adjustment')], max_length=20, verbose_name='transaction type')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='amount')),
                ('transaction_date', models.DateField(default=datetime.date.today, verbose_name='transaction date')),
                ('reference', models.CharField(blank=True, max_length=100, verbose_name='reference')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payable_transactions', to=settings.AUTH_USER_MODEL)),
                ('payable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='accounts_payable.accountpayable', verbose_name='payable')),
            ],
            options={
                'verbose_name': 'payable transaction',
                'verbose_name_plural': 'payable transactions',
                'ordering': ['-transaction_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='accountpayable',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payables', to='accounts_payable.supplier', verbose_name='supplier'),
        ),
        migrations.CreateModel(
            name='PaymentReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_type', models.CharField(choices=[('45_days', '45 Days Before Due'), ('30_days', '30 Days Before Due'), ('15_days', '15 Days Before Due'), ('overdue', 'Overdue')], max_length=20, verbose_name='reminder type')),
                ('reminder_date', models.DateField(verbose_name='reminder date')),
                ('sent', models.BooleanField(default=False, verbose_name='sent')),
                ('sent_date', models.DateTimeField(blank=True, null=True, verbose_name='sent date')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('payable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='accounts_payable.accountpayable', verbose_name='payable')),
                ('sent_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_reminders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'payment reminder',
                'verbose_name_plural': 'payment reminders',
                'ordering': ['reminder_date'],
                'unique_together': {('payable', 'reminder_type')},
            },
        ),
        migrations.AddConstraint(
            model_name='accountpayable',
            constraint=models.CheckConstraint(check=models.Q(('due_date__gt', models.F('transaction_date'))), name='ap_due_date_after_transaction_date'),
        ),
    ]
