[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ModelBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenVerifyView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "accounts_payable.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "AccountPayable",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "AccountPayable",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "PaymentReminder",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "AccountPayable",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "PayableTransaction",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "PaymentReminder",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "AccountPayable",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "AccountPayable",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "PayableTransaction",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "PaymentReminder",
        "importPath": "accounts_payable.models",
        "description": "accounts_payable.models",
        "isExtraImport": true,
        "detail": "accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "BankSerializer",
        "importPath": "accounts_receivable.serializers",
        "description": "accounts_receivable.serializers",
        "isExtraImport": true,
        "detail": "accounts_receivable.serializers",
        "documentation": {}
    },
    {
        "label": "BankSerializer",
        "importPath": "accounts_receivable.serializers",
        "description": "accounts_receivable.serializers",
        "isExtraImport": true,
        "detail": "accounts_receivable.serializers",
        "documentation": {}
    },
    {
        "label": "accounts_receivable.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "AccountReceivable",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "AccountReceivable",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "AccountReceivable",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "ReceivableTransaction",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "AccountReceivable",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "Bank",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "AccountReceivable",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "ReceivableTransaction",
        "importPath": "accounts_receivable.models",
        "description": "accounts_receivable.models",
        "isExtraImport": true,
        "detail": "accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "bank_obligations.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bank_obligations.models",
        "description": "bank_obligations.models",
        "detail": "bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "BankObligation",
        "importPath": "bank_obligations.models",
        "description": "bank_obligations.models",
        "isExtraImport": true,
        "detail": "bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "BankObligation",
        "importPath": "bank_obligations.models",
        "description": "bank_obligations.models",
        "isExtraImport": true,
        "detail": "bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "BankObligation",
        "importPath": "bank_obligations.models",
        "description": "bank_obligations.models",
        "isExtraImport": true,
        "detail": "bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "ObligationPayment",
        "importPath": "bank_obligations.models",
        "description": "bank_obligations.models",
        "isExtraImport": true,
        "detail": "bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "BankObligation",
        "importPath": "bank_obligations.models",
        "description": "bank_obligations.models",
        "isExtraImport": true,
        "detail": "bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "cash_transactions.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashAccount",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "TransactionCategory",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashTransaction",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashAccountTransaction",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashTransaction",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashAccount",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "TransactionCategory",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashTransaction",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashAccountTransaction",
        "importPath": "cash_transactions.models",
        "description": "cash_transactions.models",
        "isExtraImport": true,
        "detail": "cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.accounts.migrations.0001_initial",
        "description": "server.accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserLoginHistoryInline",
        "kind": 6,
        "importPath": "server.accounts.admin",
        "description": "server.accounts.admin",
        "peekOfCode": "class UserLoginHistoryInline(admin.TabularInline):\n    model = UserLoginHistory\n    extra = 0\n    readonly_fields = ('login_datetime', 'ip_address', 'user_agent', 'device_type', 'login_status')\n    can_delete = False\n    max_num = 10\n    verbose_name = _('Login History')\n    verbose_name_plural = _('Login History')\n@admin.register(User)\nclass UserAdmin(BaseUserAdmin):",
        "detail": "server.accounts.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "server.accounts.admin",
        "description": "server.accounts.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    list_display = ('email', 'first_name', 'last_name', 'role', 'is_staff', 'is_active', 'is_two_factor_enabled')\n    list_filter = ('role', 'is_staff', 'is_active', 'is_two_factor_enabled')\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        (_('Personal info'), {'fields': ('first_name', 'last_name', 'phone_number')}),\n        (_('Permissions'), {\n            'fields': ('role', 'is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions'),\n        }),\n        (_('Security'), {'fields': ('is_two_factor_enabled', 'last_login_ip')}),",
        "detail": "server.accounts.admin",
        "documentation": {}
    },
    {
        "label": "UserLoginHistoryAdmin",
        "kind": 6,
        "importPath": "server.accounts.admin",
        "description": "server.accounts.admin",
        "peekOfCode": "class UserLoginHistoryAdmin(admin.ModelAdmin):\n    list_display = ('user', 'login_datetime', 'ip_address', 'device_type', 'login_status')\n    list_filter = ('login_status', 'login_datetime', 'device_type')\n    search_fields = ('user__email', 'ip_address')\n    readonly_fields = ('user', 'login_datetime', 'ip_address', 'user_agent', 'device_type', 'login_status')\n    date_hierarchy = 'login_datetime'",
        "detail": "server.accounts.admin",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "server.accounts.apps",
        "description": "server.accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "server.accounts.apps",
        "documentation": {}
    },
    {
        "label": "EmailBackend",
        "kind": 6,
        "importPath": "server.accounts.backends",
        "description": "server.accounts.backends",
        "peekOfCode": "class EmailBackend(ModelBackend):\n    \"\"\"\n    Custom authentication backend to allow login with email.\n    \"\"\"\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        try:\n            # Check if the username field contains an email\n            user = User.objects.get(email=username)\n            if user.check_password(password):\n                return user",
        "detail": "server.accounts.backends",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.accounts.backends",
        "description": "server.accounts.backends",
        "peekOfCode": "User = get_user_model()\nclass EmailBackend(ModelBackend):\n    \"\"\"\n    Custom authentication backend to allow login with email.\n    \"\"\"\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        try:\n            # Check if the username field contains an email\n            user = User.objects.get(email=username)\n            if user.check_password(password):",
        "detail": "server.accounts.backends",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "server.accounts.models",
        "description": "server.accounts.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    \"\"\"Custom user manager for the User model.\"\"\"\n    def create_user(self, email, password=None, **extra_fields):\n        \"\"\"Create and save a regular user with the given email and password.\"\"\"\n        if not email:\n            raise ValueError(_('The Email field must be set'))\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)",
        "detail": "server.accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "server.accounts.models",
        "description": "server.accounts.models",
        "peekOfCode": "class User(AbstractUser):\n    \"\"\"Custom user model with email as the unique identifier.\"\"\"\n    ROLE_CHOICES = (\n        ('admin', _('Admin')),\n        ('manager', _('Manager')),\n        ('accountant', _('Accountant')),\n    )\n    username = None\n    email = models.EmailField(_('email address'), unique=True)\n    role = models.CharField(_('role'), max_length=20, choices=ROLE_CHOICES, default='accountant')",
        "detail": "server.accounts.models",
        "documentation": {}
    },
    {
        "label": "UserLoginHistory",
        "kind": 6,
        "importPath": "server.accounts.models",
        "description": "server.accounts.models",
        "peekOfCode": "class UserLoginHistory(models.Model):\n    \"\"\"Model to track user login history for security purposes.\"\"\"\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='login_history')\n    login_datetime = models.DateTimeField(_('login datetime'), auto_now_add=True)\n    ip_address = models.GenericIPAddressField(_('IP address'))\n    user_agent = models.TextField(_('user agent'), blank=True, null=True)\n    device_type = models.CharField(_('device type'), max_length=50, blank=True, null=True)\n    login_status = models.BooleanField(_('login status'), default=True)\n    class Meta:\n        verbose_name = _('user login history')",
        "detail": "server.accounts.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "server.accounts.serializers",
        "description": "server.accounts.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the User model.\"\"\"\n    password = serializers.CharField(write_only=True, required=False)\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'first_name', 'last_name', 'role', 'phone_number', \n                  'is_two_factor_enabled', 'is_active', 'password', 'last_login')\n        read_only_fields = ('id', 'last_login')\n        extra_kwargs = {\n            'password': {'write_only': True}",
        "detail": "server.accounts.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "kind": 6,
        "importPath": "server.accounts.serializers",
        "description": "server.accounts.serializers",
        "peekOfCode": "class ChangePasswordSerializer(serializers.Serializer):\n    \"\"\"Serializer for password change.\"\"\"\n    old_password = serializers.CharField(required=True)\n    new_password = serializers.CharField(required=True)\n    confirm_password = serializers.CharField(required=True)\n    def validate_old_password(self, value):\n        \"\"\"Validate that the old password is correct.\"\"\"\n        user = self.context['request'].user\n        if not user.check_password(value):\n            raise serializers.ValidationError(_('Old password is not correct'))",
        "detail": "server.accounts.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordResetSerializer",
        "kind": 6,
        "importPath": "server.accounts.serializers",
        "description": "server.accounts.serializers",
        "peekOfCode": "class PasswordResetSerializer(serializers.Serializer):\n    \"\"\"Serializer for requesting a password reset.\"\"\"\n    email = serializers.EmailField(required=True)\n    def validate_email(self, value):\n        \"\"\"Validate that a user exists with the given email.\"\"\"\n        try:\n            user = User.objects.get(email=value)\n        except User.DoesNotExist:\n            # We don't want to reveal whether a user exists or not for security reasons\n            pass",
        "detail": "server.accounts.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmSerializer",
        "kind": 6,
        "importPath": "server.accounts.serializers",
        "description": "server.accounts.serializers",
        "peekOfCode": "class PasswordResetConfirmSerializer(serializers.Serializer):\n    \"\"\"Serializer for confirming a password reset.\"\"\"\n    uid = serializers.CharField(required=True)\n    token = serializers.CharField(required=True)\n    new_password = serializers.CharField(required=True)\n    confirm_password = serializers.CharField(required=True)\n    def validate(self, data):\n        \"\"\"Validate that the new password and confirm password match.\"\"\"\n        if data['new_password'] != data['confirm_password']:\n            raise serializers.ValidationError({",
        "detail": "server.accounts.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.accounts.serializers",
        "description": "server.accounts.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the User model.\"\"\"\n    password = serializers.CharField(write_only=True, required=False)\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'first_name', 'last_name', 'role', 'phone_number', \n                  'is_two_factor_enabled', 'is_active', 'password', 'last_login')\n        read_only_fields = ('id', 'last_login')\n        extra_kwargs = {",
        "detail": "server.accounts.serializers",
        "documentation": {}
    },
    {
        "label": "AccountsAPITestCase",
        "kind": 6,
        "importPath": "server.accounts.tests",
        "description": "server.accounts.tests",
        "peekOfCode": "class AccountsAPITestCase(APITestCase):\n    def setUp(self):\n        # Create a test user\n        self.user = User.objects.create_user(\n            email='testuser@example.com',\n            password='testpassword'\n        )\n        self.login_url = '/api/v1/accounts/token/'\n    def test_login(self):\n        # Test login functionality",
        "detail": "server.accounts.tests",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.accounts.tests",
        "description": "server.accounts.tests",
        "peekOfCode": "User = get_user_model()\nclass AccountsAPITestCase(APITestCase):\n    def setUp(self):\n        # Create a test user\n        self.user = User.objects.create_user(\n            email='testuser@example.com',\n            password='testpassword'\n        )\n        self.login_url = '/api/v1/accounts/token/'\n    def test_login(self):",
        "detail": "server.accounts.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.accounts.urls",
        "description": "server.accounts.urls",
        "peekOfCode": "urlpatterns = [\n    # Authentication endpoints\n    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('token/verify/', TokenVerifyView.as_view(), name='token_verify'),\n    # User management endpoints\n    path('users/', views.UserListCreateView.as_view(), name='user-list-create'),\n    path('users/<int:pk>/', views.UserRetrieveUpdateDestroyView.as_view(), name='user-detail'),\n    path('users/me/', views.CurrentUserView.as_view(), name='current-user'),\n    # Password management",
        "detail": "server.accounts.urls",
        "documentation": {}
    },
    {
        "label": "UserListCreateView",
        "kind": 6,
        "importPath": "server.accounts.views",
        "description": "server.accounts.views",
        "peekOfCode": "class UserListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of users or create new user.\"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAdminUser]\n    def get_queryset(self):\n        \"\"\"Filter users based on role if query parameter is provided.\"\"\"\n        queryset = User.objects.all()\n        role = self.request.query_params.get('role', None)\n        if role is not None:",
        "detail": "server.accounts.views",
        "documentation": {}
    },
    {
        "label": "UserRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.accounts.views",
        "description": "server.accounts.views",
        "peekOfCode": "class UserRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete user.\"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAdminUser]\nclass CurrentUserView(APIView):\n    \"\"\"API view to retrieve or update the currently authenticated user.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        \"\"\"Retrieve the currently authenticated user.\"\"\"",
        "detail": "server.accounts.views",
        "documentation": {}
    },
    {
        "label": "CurrentUserView",
        "kind": 6,
        "importPath": "server.accounts.views",
        "description": "server.accounts.views",
        "peekOfCode": "class CurrentUserView(APIView):\n    \"\"\"API view to retrieve or update the currently authenticated user.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        \"\"\"Retrieve the currently authenticated user.\"\"\"\n        serializer = UserSerializer(request.user)\n        return Response(serializer.data)\n    def put(self, request):\n        \"\"\"Update the currently authenticated user.\"\"\"\n        serializer = UserSerializer(request.user, data=request.data, partial=True)",
        "detail": "server.accounts.views",
        "documentation": {}
    },
    {
        "label": "ChangePasswordView",
        "kind": 6,
        "importPath": "server.accounts.views",
        "description": "server.accounts.views",
        "peekOfCode": "class ChangePasswordView(APIView):\n    \"\"\"API view to change password for authenticated user.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = ChangePasswordSerializer(data=request.data, context={'request': request})\n        if serializer.is_valid():\n            user = request.user\n            user.set_password(serializer.validated_data['new_password'])\n            user.save()\n            return Response({'detail': _('Password changed successfully.')}, status=status.HTTP_200_OK)",
        "detail": "server.accounts.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetView",
        "kind": 6,
        "importPath": "server.accounts.views",
        "description": "server.accounts.views",
        "peekOfCode": "class PasswordResetView(APIView):\n    \"\"\"API view to request a password reset.\"\"\"\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = PasswordResetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response({'detail': _('Password reset email has been sent.')}, status=status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\nclass PasswordResetConfirmView(APIView):",
        "detail": "server.accounts.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmView",
        "kind": 6,
        "importPath": "server.accounts.views",
        "description": "server.accounts.views",
        "peekOfCode": "class PasswordResetConfirmView(APIView):\n    \"\"\"API view to confirm a password reset.\"\"\"\n    permission_classes = [permissions.AllowAny]\n    def post(self, request):\n        serializer = PasswordResetConfirmSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response({'detail': _('Password has been reset successfully.')}, status=status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "server.accounts.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.accounts.views",
        "description": "server.accounts.views",
        "peekOfCode": "User = get_user_model()\nclass UserListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of users or create new user.\"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAdminUser]\n    def get_queryset(self):\n        \"\"\"Filter users based on role if query parameter is provided.\"\"\"\n        queryset = User.objects.all()\n        role = self.request.query_params.get('role', None)",
        "detail": "server.accounts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.accounts_payable.migrations.0001_initial",
        "description": "server.accounts_payable.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('accounts_receivable', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AccountPayable',\n            fields=[",
        "detail": "server.accounts_payable.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.accounts_payable.migrations.0002_supplier_pdf_file_alter_accountpayable_status",
        "description": "server.accounts_payable.migrations.0002_supplier_pdf_file_alter_accountpayable_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts_payable', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='supplier',\n            name='pdf_file',\n            field=models.FileField(blank=True, null=True, upload_to='suppliers/pdf/', verbose_name='PDF file'),\n        ),",
        "detail": "server.accounts_payable.migrations.0002_supplier_pdf_file_alter_accountpayable_status",
        "documentation": {}
    },
    {
        "label": "PayableInline",
        "kind": 6,
        "importPath": "server.accounts_payable.admin",
        "description": "server.accounts_payable.admin",
        "peekOfCode": "class PayableInline(admin.TabularInline):\n    model = AccountPayable\n    extra = 0\n    fields = ('payment_number', 'transaction_date', 'due_date', 'amount', 'status')\n    readonly_fields = ('payment_number',)\n    can_delete = False\n    show_change_link = True\n    max_num = 10\n@admin.register(Supplier)\nclass SupplierAdmin(admin.ModelAdmin):",
        "detail": "server.accounts_payable.admin",
        "documentation": {}
    },
    {
        "label": "SupplierAdmin",
        "kind": 6,
        "importPath": "server.accounts_payable.admin",
        "description": "server.accounts_payable.admin",
        "peekOfCode": "class SupplierAdmin(admin.ModelAdmin):\n    list_display = ('name', 'arabic_name', 'phone', 'email', 'payment_terms', 'total_outstanding', 'is_active')\n    list_filter = ('is_active', 'payment_terms', 'created_at')\n    search_fields = ('name', 'arabic_name', 'phone', 'email', 'tax_number')\n    readonly_fields = ('created_by', 'created_at', 'updated_at', 'total_outstanding')\n    fieldsets = (\n        (None, {'fields': ('name', 'arabic_name', 'is_active')}),\n        (_('Contact Information'), {'fields': ('contact_person', 'phone', 'email', 'address')}),\n        (_('Financial Information'), {'fields': ('tax_number', 'payment_terms', 'total_outstanding')}),\n        (_('Additional Information'), {'fields': ('notes',)}),",
        "detail": "server.accounts_payable.admin",
        "documentation": {}
    },
    {
        "label": "PayableTransactionInline",
        "kind": 6,
        "importPath": "server.accounts_payable.admin",
        "description": "server.accounts_payable.admin",
        "peekOfCode": "class PayableTransactionInline(admin.TabularInline):\n    model = PayableTransaction\n    extra = 0\n    fields = ('transaction_type', 'amount', 'transaction_date', 'reference')\n    can_delete = False\n    show_change_link = True\n    max_num = 10\nclass PaymentReminderInline(admin.TabularInline):\n    model = PaymentReminder\n    extra = 0",
        "detail": "server.accounts_payable.admin",
        "documentation": {}
    },
    {
        "label": "PaymentReminderInline",
        "kind": 6,
        "importPath": "server.accounts_payable.admin",
        "description": "server.accounts_payable.admin",
        "peekOfCode": "class PaymentReminderInline(admin.TabularInline):\n    model = PaymentReminder\n    extra = 0\n    fields = ('reminder_type', 'reminder_date', 'sent', 'sent_date')\n    readonly_fields = ('reminder_date',)\n    can_delete = False\n    max_num = 5\n@admin.register(AccountPayable)\nclass AccountPayableAdmin(admin.ModelAdmin):\n    list_display = ('payment_number', 'supplier', 'bank', 'transaction_date', 'due_date', 'amount', 'status', 'days_until_due')",
        "detail": "server.accounts_payable.admin",
        "documentation": {}
    },
    {
        "label": "AccountPayableAdmin",
        "kind": 6,
        "importPath": "server.accounts_payable.admin",
        "description": "server.accounts_payable.admin",
        "peekOfCode": "class AccountPayableAdmin(admin.ModelAdmin):\n    list_display = ('payment_number', 'supplier', 'bank', 'transaction_date', 'due_date', 'amount', 'status', 'days_until_due')\n    list_filter = ('status', 'transaction_date', 'due_date', 'bank')\n    search_fields = ('payment_number', 'check_number', 'supplier__name', 'invoice_number', 'notes')\n    readonly_fields = ('payment_number', 'created_by', 'created_at', 'updated_at', 'days_until_due', 'last_reminder_date')\n    date_hierarchy = 'transaction_date'\n    fieldsets = (\n        (None, {'fields': ('payment_number', 'supplier', 'bank', 'status')}),\n        (_('Transaction Details'), {'fields': ('transaction_date', 'due_date', 'amount', 'check_number', 'days_until_due')}),\n        (_('Invoice Information'), {'fields': ('invoice_number', 'invoice_date')}),",
        "detail": "server.accounts_payable.admin",
        "documentation": {}
    },
    {
        "label": "PayableTransactionAdmin",
        "kind": 6,
        "importPath": "server.accounts_payable.admin",
        "description": "server.accounts_payable.admin",
        "peekOfCode": "class PayableTransactionAdmin(admin.ModelAdmin):\n    list_display = ('payable', 'transaction_type', 'amount', 'transaction_date', 'reference')\n    list_filter = ('transaction_type', 'transaction_date')\n    search_fields = ('payable__payment_number', 'reference', 'notes')\n    readonly_fields = ('created_by', 'created_at')\n    date_hierarchy = 'transaction_date'\n    fieldsets = (\n        (None, {'fields': ('payable', 'transaction_type')}),\n        (_('Transaction Details'), {'fields': ('amount', 'transaction_date', 'reference')}),\n        (_('Additional Information'), {'fields': ('notes',)}),",
        "detail": "server.accounts_payable.admin",
        "documentation": {}
    },
    {
        "label": "PaymentReminderAdmin",
        "kind": 6,
        "importPath": "server.accounts_payable.admin",
        "description": "server.accounts_payable.admin",
        "peekOfCode": "class PaymentReminderAdmin(admin.ModelAdmin):\n    list_display = ('payable', 'reminder_type', 'reminder_date', 'sent', 'sent_date', 'sent_by')\n    list_filter = ('reminder_type', 'sent', 'reminder_date')\n    search_fields = ('payable__payment_number', 'payable__supplier__name', 'notes')\n    readonly_fields = ('reminder_date',)\n    date_hierarchy = 'reminder_date'\n    fieldsets = (\n        (None, {'fields': ('payable', 'reminder_type', 'reminder_date')}),\n        (_('Status'), {'fields': ('sent', 'sent_date', 'sent_by')}),\n        (_('Additional Information'), {'fields': ('notes',)}),",
        "detail": "server.accounts_payable.admin",
        "documentation": {}
    },
    {
        "label": "AccountsPayableConfig",
        "kind": 6,
        "importPath": "server.accounts_payable.apps",
        "description": "server.accounts_payable.apps",
        "peekOfCode": "class AccountsPayableConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts_payable'",
        "detail": "server.accounts_payable.apps",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "server.accounts_payable.models",
        "description": "server.accounts_payable.models",
        "peekOfCode": "class Supplier(models.Model):\n    \"\"\"Model for suppliers in the accounts payable system.\"\"\"\n    name = models.CharField(_('supplier name'), max_length=200)\n    arabic_name = models.CharField(_('supplier name (Arabic)'), max_length=200, blank=True)\n    contact_person = models.CharField(_('contact person'), max_length=100, blank=True)\n    phone_regex = RegexValidator(\n        regex=r'^\\+?1?\\d{9,15}$',\n        message=_('Phone number must be entered in the format: \"+999999999\". Up to 15 digits allowed.')\n    )\n    phone = models.CharField(_('phone'), validators=[phone_regex], max_length=17, blank=True)",
        "detail": "server.accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "AccountPayable",
        "kind": 6,
        "importPath": "server.accounts_payable.models",
        "description": "server.accounts_payable.models",
        "peekOfCode": "class AccountPayable(models.Model):\n    \"\"\"Model for accounts payable transactions.\"\"\"\n    STATUS_CHOICES = (\n        ('covered', _('Covered')),\n        ('under_coverage', _('Under Coverage')),\n        ('delivered', _('Delivered')),\n        ('covered_and_delivered', _('Covered and Delivered')),\n        ('under_coverage_and_delivered', _('Under Coverage and Delivered')),\n        ('disbursed', _('Disbursed')),\n        ('covered_and_disbursed', _('Covered and Disbursed')),",
        "detail": "server.accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "PayableTransaction",
        "kind": 6,
        "importPath": "server.accounts_payable.models",
        "description": "server.accounts_payable.models",
        "peekOfCode": "class PayableTransaction(models.Model):\n    \"\"\"Model to track transactions related to accounts payable.\"\"\"\n    TRANSACTION_TYPES = (\n        ('partial_payment', _('Partial Payment')),\n        ('full_payment', _('Full Payment')),\n        ('adjustment', _('Adjustment')),\n    )\n    payable = models.ForeignKey(\n        AccountPayable,\n        on_delete=models.CASCADE,",
        "detail": "server.accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "PaymentReminder",
        "kind": 6,
        "importPath": "server.accounts_payable.models",
        "description": "server.accounts_payable.models",
        "peekOfCode": "class PaymentReminder(models.Model):\n    \"\"\"Model to track payment reminders for accounts payable.\"\"\"\n    REMINDER_TYPES = (\n        ('45_days', _('45 Days Before Due')),\n        ('30_days', _('30 Days Before Due')),\n        ('15_days', _('15 Days Before Due')),\n        ('overdue', _('Overdue')),\n    )\n    payable = models.ForeignKey(\n        AccountPayable,",
        "detail": "server.accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "create_payment_reminders",
        "kind": 2,
        "importPath": "server.accounts_payable.models",
        "description": "server.accounts_payable.models",
        "peekOfCode": "def create_payment_reminders(sender, instance, created, **kwargs):\n    \"\"\"Create payment reminders when a new AccountPayable is created.\"\"\"\n    if created and instance.due_date:\n        # Calculate reminder dates\n        due_date = instance.due_date\n        reminder_dates = {\n            '45_days': due_date - datetime.timedelta(days=45),\n            '30_days': due_date - datetime.timedelta(days=30),\n            '15_days': due_date - datetime.timedelta(days=15),\n        }",
        "detail": "server.accounts_payable.models",
        "documentation": {}
    },
    {
        "label": "SupplierSerializer",
        "kind": 6,
        "importPath": "server.accounts_payable.serializers",
        "description": "server.accounts_payable.serializers",
        "peekOfCode": "class SupplierSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the Supplier model.\"\"\"\n    total_outstanding = serializers.DecimalField(max_digits=14, decimal_places=2, read_only=True)\n    class Meta:\n        model = Supplier\n        fields = '__all__'\n        read_only_fields = ('created_by', 'created_at', 'updated_at', 'total_outstanding')\nclass PayableTransactionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the PayableTransaction model.\"\"\"\n    class Meta:",
        "detail": "server.accounts_payable.serializers",
        "documentation": {}
    },
    {
        "label": "PayableTransactionSerializer",
        "kind": 6,
        "importPath": "server.accounts_payable.serializers",
        "description": "server.accounts_payable.serializers",
        "peekOfCode": "class PayableTransactionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the PayableTransaction model.\"\"\"\n    class Meta:\n        model = PayableTransaction\n        fields = '__all__'\n        read_only_fields = ('created_by', 'created_at')\nclass PaymentReminderSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the PaymentReminder model.\"\"\"\n    class Meta:\n        model = PaymentReminder",
        "detail": "server.accounts_payable.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentReminderSerializer",
        "kind": 6,
        "importPath": "server.accounts_payable.serializers",
        "description": "server.accounts_payable.serializers",
        "peekOfCode": "class PaymentReminderSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the PaymentReminder model.\"\"\"\n    class Meta:\n        model = PaymentReminder\n        fields = '__all__'\n        read_only_fields = ('sent_by', 'sent_date')\nclass AccountPayableSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the AccountPayable model.\"\"\"\n    bank_name = serializers.StringRelatedField(source='bank.name', read_only=True)\n    supplier_name = serializers.StringRelatedField(source='supplier.name', read_only=True)",
        "detail": "server.accounts_payable.serializers",
        "documentation": {}
    },
    {
        "label": "AccountPayableSerializer",
        "kind": 6,
        "importPath": "server.accounts_payable.serializers",
        "description": "server.accounts_payable.serializers",
        "peekOfCode": "class AccountPayableSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the AccountPayable model.\"\"\"\n    bank_name = serializers.StringRelatedField(source='bank.name', read_only=True)\n    supplier_name = serializers.StringRelatedField(source='supplier.name', read_only=True)\n    transactions = PayableTransactionSerializer(many=True, read_only=True)\n    reminders = PaymentReminderSerializer(many=True, read_only=True)\n    days_until_due = serializers.IntegerField(read_only=True)\n    class Meta:\n        model = AccountPayable\n        fields = '__all__'",
        "detail": "server.accounts_payable.serializers",
        "documentation": {}
    },
    {
        "label": "SendReminderSerializer",
        "kind": 6,
        "importPath": "server.accounts_payable.serializers",
        "description": "server.accounts_payable.serializers",
        "peekOfCode": "class SendReminderSerializer(serializers.Serializer):\n    \"\"\"Serializer for sending a payment reminder.\"\"\"\n    notes = serializers.CharField(required=False, allow_blank=True)\nclass DashboardSummarySerializer(serializers.Serializer):\n    \"\"\"Serializer for the dashboard summary data.\"\"\"\n    total_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    scheduled_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    in_process_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    paid_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    delayed_payables = serializers.DecimalField(max_digits=14, decimal_places=2)",
        "detail": "server.accounts_payable.serializers",
        "documentation": {}
    },
    {
        "label": "DashboardSummarySerializer",
        "kind": 6,
        "importPath": "server.accounts_payable.serializers",
        "description": "server.accounts_payable.serializers",
        "peekOfCode": "class DashboardSummarySerializer(serializers.Serializer):\n    \"\"\"Serializer for the dashboard summary data.\"\"\"\n    total_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    scheduled_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    in_process_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    paid_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    delayed_payables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    total_suppliers = serializers.IntegerField()\n    upcoming_reminders = PaymentReminderSerializer(many=True)\n    recent_transactions = PayableTransactionSerializer(many=True)",
        "detail": "server.accounts_payable.serializers",
        "documentation": {}
    },
    {
        "label": "PayablesReportSerializer",
        "kind": 6,
        "importPath": "server.accounts_payable.serializers",
        "description": "server.accounts_payable.serializers",
        "peekOfCode": "class PayablesReportSerializer(serializers.Serializer):\n    \"\"\"Serializer for the payables report data.\"\"\"\n    start_date = serializers.DateField()\n    end_date = serializers.DateField()\n    status = serializers.CharField(required=False)\n    supplier = serializers.IntegerField(required=False)\n    bank = serializers.IntegerField(required=False)\nclass UpcomingPaymentsSerializer(serializers.Serializer):\n    \"\"\"Serializer for the upcoming payments data.\"\"\"\n    days = serializers.IntegerField(default=30)  # Number of days to look ahead",
        "detail": "server.accounts_payable.serializers",
        "documentation": {}
    },
    {
        "label": "UpcomingPaymentsSerializer",
        "kind": 6,
        "importPath": "server.accounts_payable.serializers",
        "description": "server.accounts_payable.serializers",
        "peekOfCode": "class UpcomingPaymentsSerializer(serializers.Serializer):\n    \"\"\"Serializer for the upcoming payments data.\"\"\"\n    days = serializers.IntegerField(default=30)  # Number of days to look ahead",
        "detail": "server.accounts_payable.serializers",
        "documentation": {}
    },
    {
        "label": "AccountsPayableAPITestCase",
        "kind": 6,
        "importPath": "server.accounts_payable.tests",
        "description": "server.accounts_payable.tests",
        "peekOfCode": "class AccountsPayableAPITestCase(APITestCase):\n    def setUp(self):\n        self.payables_url = '/api/v1/accounts-payable/payables/'\n        self.login_url = '/api/v1/accounts/token/'\n        self.user_data = {'email': 'testuser@example.com', 'password': 'testpassword'}\n        # Create a test user and get JWT token\n        User = get_user_model()\n        self.user = User.objects.create_user(**self.user_data)\n        response = self.client.post(self.login_url, self.user_data)\n        self.token = response.data['access']",
        "detail": "server.accounts_payable.tests",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "server.accounts_payable.tests",
        "description": "server.accounts_payable.tests",
        "peekOfCode": "def create_user(db):\n    User = get_user_model()\n    return User.objects.create_user(email=\"testuser@example.com\", password=\"testpassword\")\n@pytest.fixture\ndef create_bank(db):\n    return Bank.objects.create(\n        name=\"Test Bank\",\n        branch=\"Main Branch\",\n        swift_code=\"TEST123\",\n        contact_person=\"John Doe\",",
        "detail": "server.accounts_payable.tests",
        "documentation": {}
    },
    {
        "label": "create_bank",
        "kind": 2,
        "importPath": "server.accounts_payable.tests",
        "description": "server.accounts_payable.tests",
        "peekOfCode": "def create_bank(db):\n    return Bank.objects.create(\n        name=\"Test Bank\",\n        branch=\"Main Branch\",\n        swift_code=\"TEST123\",\n        contact_person=\"John Doe\",\n        phone=\"+123456789\",\n        email=\"bank@example.com\",\n        address=\"123 Test Street\"\n    )",
        "detail": "server.accounts_payable.tests",
        "documentation": {}
    },
    {
        "label": "create_supplier",
        "kind": 2,
        "importPath": "server.accounts_payable.tests",
        "description": "server.accounts_payable.tests",
        "peekOfCode": "def create_supplier(db):\n    return Supplier.objects.create(\n        name=\"Test Supplier\",\n        contact_person=\"Jane Doe\",\n        email=\"supplier@example.com\",\n        phone=\"+987654321\",\n        address=\"456 Supplier Lane\",\n        tax_number=\"TAX12345\"\n    )\n@pytest.mark.django_db",
        "detail": "server.accounts_payable.tests",
        "documentation": {}
    },
    {
        "label": "test_create_account_payable",
        "kind": 2,
        "importPath": "server.accounts_payable.tests",
        "description": "server.accounts_payable.tests",
        "peekOfCode": "def test_create_account_payable(create_user, create_bank, create_supplier):\n    payable = AccountPayable.objects.create(\n        supplier=create_supplier,\n        bank=create_bank,\n        amount=1000.00,\n        due_date=\"2025-05-01\",\n        created_by=create_user\n    )\n    assert payable.supplier.name == \"Test Supplier\"\n    assert payable.bank.name == \"Test Bank\"",
        "detail": "server.accounts_payable.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.accounts_payable.urls",
        "description": "server.accounts_payable.urls",
        "peekOfCode": "urlpatterns = [\n    # Supplier endpoints\n    path('suppliers/', views.SupplierListCreateView.as_view(), name='supplier-list-create'),\n    path('suppliers/<int:pk>/', views.SupplierRetrieveUpdateDestroyView.as_view(), name='supplier-detail'),\n    # Account Payable endpoints\n    path('payables/', views.AccountPayableListCreateView.as_view(), name='payable-list-create'),\n    path('payables/<int:pk>/', views.AccountPayableRetrieveUpdateDestroyView.as_view(), name='payable-detail'),\n    path('payables/<int:payable_id>/transactions/', views.PayableTransactionListCreateView.as_view(), name='payable-transaction-list-create'),\n    path('payables/transactions/<int:pk>/', views.PayableTransactionRetrieveUpdateDestroyView.as_view(), name='payable-transaction-detail'),\n    # Payment Reminder endpoints",
        "detail": "server.accounts_payable.urls",
        "documentation": {}
    },
    {
        "label": "SupplierListCreateView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class SupplierListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of suppliers or create new supplier.\"\"\"\n    queryset = Supplier.objects.all()\n    serializer_class = SupplierSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['is_active', 'payment_terms']\n    search_fields = ['name', 'arabic_name', 'phone', 'email', 'tax_number']\n    ordering_fields = ['name', 'payment_terms', 'created_at']\n    def perform_create(self, serializer):",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "SupplierRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class SupplierRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete supplier.\"\"\"\n    queryset = Supplier.objects.all()\n    serializer_class = SupplierSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Account Payable views\nclass AccountPayableListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of account payables or create new account payable.\"\"\"\n    queryset = AccountPayable.objects.all()\n    serializer_class = AccountPayableSerializer",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "AccountPayableListCreateView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class AccountPayableListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of account payables or create new account payable.\"\"\"\n    queryset = AccountPayable.objects.all()\n    serializer_class = AccountPayableSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['status', 'bank', 'supplier', 'transaction_date']\n    search_fields = ['payment_number', 'check_number', 'supplier__name', 'invoice_number', 'notes']\n    ordering_fields = ['transaction_date', 'due_date', 'amount', 'created_at']\n    def perform_create(self, serializer):",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "AccountPayableRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class AccountPayableRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete account payable.\"\"\"\n    queryset = AccountPayable.objects.all()\n    serializer_class = AccountPayableSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Payable Transaction views\nclass PayableTransactionListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of transactions for a specific payable or create new transaction.\"\"\"\n    serializer_class = PayableTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "PayableTransactionListCreateView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class PayableTransactionListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of transactions for a specific payable or create new transaction.\"\"\"\n    serializer_class = PayableTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        payable_id = self.kwargs.get('payable_id')\n        return PayableTransaction.objects.filter(payable_id=payable_id)\n    def perform_create(self, serializer):\n        payable_id = self.kwargs.get('payable_id')\n        payable = AccountPayable.objects.get(id=payable_id)",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "PayableTransactionRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class PayableTransactionRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete payable transaction.\"\"\"\n    queryset = PayableTransaction.objects.all()\n    serializer_class = PayableTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Payment Reminder views\nclass PaymentReminderListView(generics.ListAPIView):\n    \"\"\"API view to retrieve list of payment reminders.\"\"\"\n    serializer_class = PaymentReminderSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "PaymentReminderListView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class PaymentReminderListView(generics.ListAPIView):\n    \"\"\"API view to retrieve list of payment reminders.\"\"\"\n    serializer_class = PaymentReminderSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['reminder_type', 'sent', 'reminder_date']\n    ordering_fields = ['reminder_date', 'payable__due_date']\n    def get_queryset(self):\n        return PaymentReminder.objects.all()\nclass PaymentReminderRetrieveUpdateView(generics.RetrieveUpdateAPIView):",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "PaymentReminderRetrieveUpdateView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class PaymentReminderRetrieveUpdateView(generics.RetrieveUpdateAPIView):\n    \"\"\"API view to retrieve or update payment reminder.\"\"\"\n    queryset = PaymentReminder.objects.all()\n    serializer_class = PaymentReminderSerializer\n    permission_classes = [permissions.IsAuthenticated]\nclass SendReminderView(APIView):\n    \"\"\"API view to send a payment reminder.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request, pk):\n        try:",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "SendReminderView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class SendReminderView(APIView):\n    \"\"\"API view to send a payment reminder.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request, pk):\n        try:\n            reminder = PaymentReminder.objects.get(pk=pk)\n        except PaymentReminder.DoesNotExist:\n            return Response(\n                {'detail': 'Payment reminder not found.'},\n                status=status.HTTP_404_NOT_FOUND",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "DashboardSummaryView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class DashboardSummaryView(APIView):\n    \"\"\"API view to retrieve summary data for dashboard.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        # Get summary data\n        total_payables = AccountPayable.objects.aggregate(total=Sum('amount'))['total'] or 0\n        scheduled_payables = AccountPayable.objects.filter(status='scheduled').aggregate(total=Sum('amount'))['total'] or 0\n        in_process_payables = AccountPayable.objects.filter(status='in_process').aggregate(total=Sum('amount'))['total'] or 0\n        paid_payables = AccountPayable.objects.filter(status='paid').aggregate(total=Sum('amount'))['total'] or 0\n        delayed_payables = AccountPayable.objects.filter(status='delayed').aggregate(total=Sum('amount'))['total'] or 0",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "PayablesReportView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class PayablesReportView(APIView):\n    \"\"\"API view to generate reports for payables.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = PayablesReportSerializer(data=request.data)\n        if serializer.is_valid():\n            start_date = serializer.validated_data['start_date']\n            end_date = serializer.validated_data['end_date']\n            status_filter = serializer.validated_data.get('status')\n            supplier_filter = serializer.validated_data.get('supplier')",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "UpcomingPaymentsView",
        "kind": 6,
        "importPath": "server.accounts_payable.views",
        "description": "server.accounts_payable.views",
        "peekOfCode": "class UpcomingPaymentsView(APIView):\n    \"\"\"API view to retrieve upcoming payments.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = UpcomingPaymentsSerializer(data=request.data)\n        if serializer.is_valid():\n            days = serializer.validated_data.get('days', 30)\n            today = timezone.now().date()\n            end_date = today + datetime.timedelta(days=days)\n            # Get upcoming payments",
        "detail": "server.accounts_payable.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.accounts_receivable.migrations.0001_initial",
        "description": "server.accounts_receivable.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AccountReceivable',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.accounts_receivable.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.accounts_receivable.migrations.0002_bank_pdf_file_client_pdf_file_and_more",
        "description": "server.accounts_receivable.migrations.0002_bank_pdf_file_client_pdf_file_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts_receivable', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='bank',\n            name='pdf_file',\n            field=models.FileField(blank=True, null=True, upload_to='banks/pdf/', verbose_name='PDF file'),\n        ),",
        "detail": "server.accounts_receivable.migrations.0002_bank_pdf_file_client_pdf_file_and_more",
        "documentation": {}
    },
    {
        "label": "BankAdmin",
        "kind": 6,
        "importPath": "server.accounts_receivable.admin",
        "description": "server.accounts_receivable.admin",
        "peekOfCode": "class BankAdmin(admin.ModelAdmin):\n    list_display = ('name', 'arabic_name', 'branch', 'swift_code', 'is_active')\n    list_filter = ('is_active',)\n    search_fields = ('name', 'arabic_name', 'branch', 'swift_code')\n    fieldsets = (\n        (None, {'fields': ('name', 'arabic_name', 'is_active')}),\n        (_('Bank Details'), {'fields': ('branch', 'swift_code')}),\n        (_('Contact Information'), {'fields': ('contact_person', 'phone', 'email', 'address')}),\n    )\nclass ReceivableInline(admin.TabularInline):",
        "detail": "server.accounts_receivable.admin",
        "documentation": {}
    },
    {
        "label": "ReceivableInline",
        "kind": 6,
        "importPath": "server.accounts_receivable.admin",
        "description": "server.accounts_receivable.admin",
        "peekOfCode": "class ReceivableInline(admin.TabularInline):\n    model = AccountReceivable\n    extra = 0\n    fields = ('receipt_number', 'transaction_date', 'due_date', 'amount', 'status')\n    readonly_fields = ('receipt_number',)\n    can_delete = False\n    show_change_link = True\n    max_num = 10\n@admin.register(Client)\nclass ClientAdmin(admin.ModelAdmin):",
        "detail": "server.accounts_receivable.admin",
        "documentation": {}
    },
    {
        "label": "ClientAdmin",
        "kind": 6,
        "importPath": "server.accounts_receivable.admin",
        "description": "server.accounts_receivable.admin",
        "peekOfCode": "class ClientAdmin(admin.ModelAdmin):\n    list_display = ('name', 'arabic_name', 'phone', 'email', 'total_outstanding', 'is_active')\n    list_filter = ('is_active', 'created_at')\n    search_fields = ('name', 'arabic_name', 'phone', 'email', 'tax_number')\n    readonly_fields = ('created_by', 'created_at', 'updated_at', 'total_outstanding')\n    fieldsets = (\n        (None, {'fields': ('name', 'arabic_name', 'is_active')}),\n        (_('Contact Information'), {'fields': ('contact_person', 'phone', 'email', 'address')}),\n        (_('Financial Information'), {'fields': ('tax_number', 'credit_limit', 'total_outstanding')}),\n        (_('Additional Information'), {'fields': ('notes',)}),",
        "detail": "server.accounts_receivable.admin",
        "documentation": {}
    },
    {
        "label": "ReceivableTransactionInline",
        "kind": 6,
        "importPath": "server.accounts_receivable.admin",
        "description": "server.accounts_receivable.admin",
        "peekOfCode": "class ReceivableTransactionInline(admin.TabularInline):\n    model = ReceivableTransaction\n    extra = 0\n    fields = ('transaction_type', 'amount', 'transaction_date', 'reference')\n    can_delete = False\n    show_change_link = True\n    max_num = 10\n@admin.register(AccountReceivable)\nclass AccountReceivableAdmin(admin.ModelAdmin):\n    list_display = ('receipt_number', 'client', 'bank', 'transaction_date', 'due_date', 'amount', 'status')",
        "detail": "server.accounts_receivable.admin",
        "documentation": {}
    },
    {
        "label": "AccountReceivableAdmin",
        "kind": 6,
        "importPath": "server.accounts_receivable.admin",
        "description": "server.accounts_receivable.admin",
        "peekOfCode": "class AccountReceivableAdmin(admin.ModelAdmin):\n    list_display = ('receipt_number', 'client', 'bank', 'transaction_date', 'due_date', 'amount', 'status')\n    list_filter = ('status', 'transaction_date', 'due_date', 'bank')\n    search_fields = ('receipt_number', 'check_number', 'client__name', 'notes')\n    readonly_fields = ('receipt_number', 'created_by', 'created_at', 'updated_at')\n    date_hierarchy = 'transaction_date'\n    fieldsets = (\n        (None, {'fields': ('receipt_number', 'client', 'bank', 'status')}),\n        (_('Transaction Details'), {'fields': ('transaction_date', 'due_date', 'amount', 'check_number')}),\n        (_('Additional Information'), {'fields': ('notes',)}),",
        "detail": "server.accounts_receivable.admin",
        "documentation": {}
    },
    {
        "label": "ReceivableTransactionAdmin",
        "kind": 6,
        "importPath": "server.accounts_receivable.admin",
        "description": "server.accounts_receivable.admin",
        "peekOfCode": "class ReceivableTransactionAdmin(admin.ModelAdmin):\n    list_display = ('receivable', 'transaction_type', 'amount', 'transaction_date', 'reference')\n    list_filter = ('transaction_type', 'transaction_date')\n    search_fields = ('receivable__receipt_number', 'reference', 'notes')\n    readonly_fields = ('created_by', 'created_at')\n    date_hierarchy = 'transaction_date'\n    fieldsets = (\n        (None, {'fields': ('receivable', 'transaction_type')}),\n        (_('Transaction Details'), {'fields': ('amount', 'transaction_date', 'reference')}),\n        (_('Additional Information'), {'fields': ('notes',)}),",
        "detail": "server.accounts_receivable.admin",
        "documentation": {}
    },
    {
        "label": "AccountsReceivableConfig",
        "kind": 6,
        "importPath": "server.accounts_receivable.apps",
        "description": "server.accounts_receivable.apps",
        "peekOfCode": "class AccountsReceivableConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts_receivable'",
        "detail": "server.accounts_receivable.apps",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "server.accounts_receivable.models",
        "description": "server.accounts_receivable.models",
        "peekOfCode": "class Bank(models.Model):\n    \"\"\"Model for banks that can be used in transactions.\"\"\"\n    name = models.CharField(_('bank name'), max_length=100)\n    arabic_name = models.CharField(_('bank name (Arabic)'), max_length=100)\n    branch = models.CharField(_('branch'), max_length=100, blank=True)\n    swift_code = models.CharField(_('SWIFT code'), max_length=20, blank=True)\n    contact_person = models.CharField(_('contact person'), max_length=100, blank=True)\n    phone = models.CharField(_('phone'), max_length=20, blank=True)\n    email = models.EmailField(_('email'), blank=True)\n    address = models.TextField(_('address'), blank=True)",
        "detail": "server.accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "server.accounts_receivable.models",
        "description": "server.accounts_receivable.models",
        "peekOfCode": "class Client(models.Model):\n    \"\"\"Model for clients in the accounts receivable system.\"\"\"\n    name = models.CharField(_('client name'), max_length=200)\n    arabic_name = models.CharField(_('client name (Arabic)'), max_length=200, blank=True)\n    contact_person = models.CharField(_('contact person'), max_length=100, blank=True)\n    phone_regex = RegexValidator(\n        regex=r'^\\+?1?\\d{9,15}$',\n        message=_('Phone number must be entered in the format: \"+999999999\". Up to 15 digits allowed.')\n    )\n    phone = models.CharField(_('phone'), validators=[phone_regex], max_length=17, blank=True)",
        "detail": "server.accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "AccountReceivable",
        "kind": 6,
        "importPath": "server.accounts_receivable.models",
        "description": "server.accounts_receivable.models",
        "peekOfCode": "class AccountReceivable(models.Model):\n    \"\"\"Model for accounts receivable transactions.\"\"\"\n    STATUS_CHOICES = (\n        ('active', _('Active')),\n        ('completed', _('Completed')),\n        ('pending', _('Pending')),\n        ('overdue', _('Overdue')),\n        ('treasury', _('Treasury')),\n        ('with_representative', _('With Representative')),\n        ('in_collection', _('In Collection')),",
        "detail": "server.accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "ReceivableTransaction",
        "kind": 6,
        "importPath": "server.accounts_receivable.models",
        "description": "server.accounts_receivable.models",
        "peekOfCode": "class ReceivableTransaction(models.Model):\n    \"\"\"Model to track transactions related to accounts receivable.\"\"\"\n    TRANSACTION_TYPES = (\n        ('deposit', _('Deposit')),\n        ('partial_payment', _('Partial Payment')),\n        ('full_payment', _('Full Payment')),\n        ('return', _('Return')),\n        ('adjustment', _('Adjustment')),\n    )\n    receivable = models.ForeignKey(",
        "detail": "server.accounts_receivable.models",
        "documentation": {}
    },
    {
        "label": "BankSerializer",
        "kind": 6,
        "importPath": "server.accounts_receivable.serializers",
        "description": "server.accounts_receivable.serializers",
        "peekOfCode": "class BankSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the Bank model.\"\"\"\n    class Meta:\n        model = Bank\n        fields = '__all__'\n        read_only_fields = ('created_at', 'updated_at')\nclass ClientSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the Client model.\"\"\"\n    total_outstanding = serializers.DecimalField(max_digits=14, decimal_places=2, read_only=True)\n    class Meta:",
        "detail": "server.accounts_receivable.serializers",
        "documentation": {}
    },
    {
        "label": "ClientSerializer",
        "kind": 6,
        "importPath": "server.accounts_receivable.serializers",
        "description": "server.accounts_receivable.serializers",
        "peekOfCode": "class ClientSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the Client model.\"\"\"\n    total_outstanding = serializers.DecimalField(max_digits=14, decimal_places=2, read_only=True)\n    class Meta:\n        model = Client\n        fields = '__all__'\n        read_only_fields = ('created_by', 'created_at', 'updated_at', 'total_outstanding')\nclass ReceivableTransactionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the ReceivableTransaction model.\"\"\"\n    class Meta:",
        "detail": "server.accounts_receivable.serializers",
        "documentation": {}
    },
    {
        "label": "ReceivableTransactionSerializer",
        "kind": 6,
        "importPath": "server.accounts_receivable.serializers",
        "description": "server.accounts_receivable.serializers",
        "peekOfCode": "class ReceivableTransactionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the ReceivableTransaction model.\"\"\"\n    class Meta:\n        model = ReceivableTransaction\n        fields = '__all__'\n        read_only_fields = ('created_by', 'created_at')\nclass AccountReceivableSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the AccountReceivable model.\"\"\"\n    bank_name = serializers.StringRelatedField(source='bank.name', read_only=True)\n    client_name = serializers.StringRelatedField(source='client.name', read_only=True)",
        "detail": "server.accounts_receivable.serializers",
        "documentation": {}
    },
    {
        "label": "AccountReceivableSerializer",
        "kind": 6,
        "importPath": "server.accounts_receivable.serializers",
        "description": "server.accounts_receivable.serializers",
        "peekOfCode": "class AccountReceivableSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the AccountReceivable model.\"\"\"\n    bank_name = serializers.StringRelatedField(source='bank.name', read_only=True)\n    client_name = serializers.StringRelatedField(source='client.name', read_only=True)\n    transactions = ReceivableTransactionSerializer(many=True, read_only=True)\n    class Meta:\n        model = AccountReceivable\n        fields = '__all__'\n        read_only_fields = ('receipt_number', 'created_by', 'created_at', 'updated_at')\n    def validate(self, data):",
        "detail": "server.accounts_receivable.serializers",
        "documentation": {}
    },
    {
        "label": "DashboardSummarySerializer",
        "kind": 6,
        "importPath": "server.accounts_receivable.serializers",
        "description": "server.accounts_receivable.serializers",
        "peekOfCode": "class DashboardSummarySerializer(serializers.Serializer):\n    \"\"\"Serializer for the dashboard summary data.\"\"\"\n    total_receivables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    active_receivables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    completed_receivables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    overdue_receivables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    pending_receivables = serializers.DecimalField(max_digits=14, decimal_places=2)\n    total_clients = serializers.IntegerField()\n    recent_transactions = ReceivableTransactionSerializer(many=True)\nclass ReceivablesReportSerializer(serializers.Serializer):",
        "detail": "server.accounts_receivable.serializers",
        "documentation": {}
    },
    {
        "label": "ReceivablesReportSerializer",
        "kind": 6,
        "importPath": "server.accounts_receivable.serializers",
        "description": "server.accounts_receivable.serializers",
        "peekOfCode": "class ReceivablesReportSerializer(serializers.Serializer):\n    \"\"\"Serializer for the receivables report data.\"\"\"\n    start_date = serializers.DateField()\n    end_date = serializers.DateField()\n    status = serializers.CharField(required=False)\n    client = serializers.IntegerField(required=False)\n    bank = serializers.IntegerField(required=False)",
        "detail": "server.accounts_receivable.serializers",
        "documentation": {}
    },
    {
        "label": "AccountsReceivableAPITestCase",
        "kind": 6,
        "importPath": "server.accounts_receivable.tests",
        "description": "server.accounts_receivable.tests",
        "peekOfCode": "class AccountsReceivableAPITestCase(APITestCase):\n    def setUp(self):\n        self.receivables_url = '/api/v1/accounts-receivable/receivables/'\n        self.login_url = '/api/v1/accounts/token/'\n        self.user_data = {'email': 'testuser@example.com', 'password': 'testpassword'}\n        # Create a test user and get JWT token\n        User = get_user_model()\n        self.user = User.objects.create_user(**self.user_data)\n        response = self.client.post(self.login_url, self.user_data)\n        self.token = response.data['access']",
        "detail": "server.accounts_receivable.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.accounts_receivable.urls",
        "description": "server.accounts_receivable.urls",
        "peekOfCode": "urlpatterns = [\n    # Bank endpoints\n    path('banks/', views.BankListCreateView.as_view(), name='bank-list-create'),\n    path('banks/<int:pk>/', views.BankRetrieveUpdateDestroyView.as_view(), name='bank-detail'),\n    # Client endpoints\n    path('clients/', views.ClientListCreateView.as_view(), name='client-list-create'),\n    path('clients/<int:pk>/', views.ClientRetrieveUpdateDestroyView.as_view(), name='client-detail'),\n    # Account Receivable endpoints\n    path('receivables/', views.AccountReceivableListCreateView.as_view(), name='receivable-list-create'),\n    path('receivables/<int:pk>/', views.AccountReceivableRetrieveUpdateDestroyView.as_view(), name='receivable-detail'),",
        "detail": "server.accounts_receivable.urls",
        "documentation": {}
    },
    {
        "label": "BankListCreateView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class BankListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of banks or create new bank.\"\"\"\n    queryset = Bank.objects.all()\n    serializer_class = BankSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['is_active']\n    search_fields = ['name', 'arabic_name', 'branch', 'swift_code']\n    ordering_fields = ['name', 'created_at']\nclass BankRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "BankRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class BankRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete bank.\"\"\"\n    queryset = Bank.objects.all()\n    serializer_class = BankSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Client views\nclass ClientListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of clients or create new client.\"\"\"\n    queryset = Client.objects.all()\n    serializer_class = ClientSerializer",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "ClientListCreateView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class ClientListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of clients or create new client.\"\"\"\n    queryset = Client.objects.all()\n    serializer_class = ClientSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['is_active']\n    search_fields = ['name', 'arabic_name', 'phone', 'email', 'tax_number']\n    ordering_fields = ['name', 'created_at']\n    def perform_create(self, serializer):",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "ClientRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class ClientRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete client.\"\"\"\n    queryset = Client.objects.all()\n    serializer_class = ClientSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Account Receivable views\nclass AccountReceivableListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of account receivables or create new account receivable.\"\"\"\n    queryset = AccountReceivable.objects.all()\n    serializer_class = AccountReceivableSerializer",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "AccountReceivableListCreateView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class AccountReceivableListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of account receivables or create new account receivable.\"\"\"\n    queryset = AccountReceivable.objects.all()\n    serializer_class = AccountReceivableSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['status', 'bank', 'client', 'transaction_date']\n    search_fields = ['receipt_number', 'check_number', 'client__name', 'notes']\n    ordering_fields = ['transaction_date', 'due_date', 'amount', 'created_at']\n    def perform_create(self, serializer):",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "AccountReceivableRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class AccountReceivableRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete account receivable.\"\"\"\n    queryset = AccountReceivable.objects.all()\n    serializer_class = AccountReceivableSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Receivable Transaction views\nclass ReceivableTransactionListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of transactions for a specific receivable or create new transaction.\"\"\"\n    serializer_class = ReceivableTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "ReceivableTransactionListCreateView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class ReceivableTransactionListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of transactions for a specific receivable or create new transaction.\"\"\"\n    serializer_class = ReceivableTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        receivable_id = self.kwargs.get('receivable_id')\n        return ReceivableTransaction.objects.filter(receivable_id=receivable_id)\n    def perform_create(self, serializer):\n        receivable_id = self.kwargs.get('receivable_id')\n        receivable = AccountReceivable.objects.get(id=receivable_id)",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "ReceivableTransactionRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class ReceivableTransactionRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete receivable transaction.\"\"\"\n    queryset = ReceivableTransaction.objects.all()\n    serializer_class = ReceivableTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Dashboard and reporting views\nclass DashboardSummaryView(APIView):\n    \"\"\"API view to retrieve summary data for dashboard.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "DashboardSummaryView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class DashboardSummaryView(APIView):\n    \"\"\"API view to retrieve summary data for dashboard.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        # Get summary data\n        total_receivables = AccountReceivable.objects.aggregate(total=Sum('amount'))['total'] or 0\n        active_receivables = AccountReceivable.objects.filter(status='active').aggregate(total=Sum('amount'))['total'] or 0\n        completed_receivables = AccountReceivable.objects.filter(status='completed').aggregate(total=Sum('amount'))['total'] or 0\n        overdue_receivables = AccountReceivable.objects.filter(status='overdue').aggregate(total=Sum('amount'))['total'] or 0\n        pending_receivables = AccountReceivable.objects.filter(status='pending').aggregate(total=Sum('amount'))['total'] or 0",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "ReceivablesReportView",
        "kind": 6,
        "importPath": "server.accounts_receivable.views",
        "description": "server.accounts_receivable.views",
        "peekOfCode": "class ReceivablesReportView(APIView):\n    \"\"\"API view to generate reports for receivables.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = ReceivablesReportSerializer(data=request.data)\n        if serializer.is_valid():\n            start_date = serializer.validated_data['start_date']\n            end_date = serializer.validated_data['end_date']\n            status_filter = serializer.validated_data.get('status')\n            client_filter = serializer.validated_data.get('client')",
        "detail": "server.accounts_receivable.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.bank_obligations.migrations.0001_initial",
        "description": "server.bank_obligations.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('accounts_receivable', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BankObligation',\n            fields=[",
        "detail": "server.bank_obligations.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.bank_obligations.migrations.0002_bankobligation_status",
        "description": "server.bank_obligations.migrations.0002_bankobligation_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank_obligations', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='bankobligation',\n            name='status',\n            field=models.CharField(choices=[('created', 'Created'), ('covered_with_papers', 'Covered with Papers'), ('covered_with_cash', 'Covered with Cash'), ('paid', 'Paid')], default='created', max_length=30, verbose_name='status'),\n        ),",
        "detail": "server.bank_obligations.migrations.0002_bankobligation_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.bank_obligations.migrations.0003_alter_bankobligation_end_date_and_more",
        "description": "server.bank_obligations.migrations.0003_alter_bankobligation_end_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank_obligations', '0002_bankobligation_status'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bankobligation',\n            name='end_date',\n            field=models.DateField(blank=True, null=True, verbose_name='end date'),\n        ),",
        "detail": "server.bank_obligations.migrations.0003_alter_bankobligation_end_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.bank_obligations.migrations.0004_bank",
        "description": "server.bank_obligations.migrations.0004_bank",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank_obligations', '0003_alter_bankobligation_end_date_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bank',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "server.bank_obligations.migrations.0004_bank",
        "documentation": {}
    },
    {
        "label": "ObligationPaymentInline",
        "kind": 6,
        "importPath": "server.bank_obligations.admin",
        "description": "server.bank_obligations.admin",
        "peekOfCode": "class ObligationPaymentInline(admin.TabularInline):\n    model = ObligationPayment\n    extra = 0\n    fields = ('payment_date', 'amount', 'principal_portion', 'interest_portion', 'reference_number')\n    can_delete = False\n    show_change_link = True\n    max_num = 10\n@admin.register(BankObligation)\nclass BankObligationAdmin(admin.ModelAdmin):\n    list_display = ('obligation_number', 'obligation_type', 'bank', 'principal_amount', ",
        "detail": "server.bank_obligations.admin",
        "documentation": {}
    },
    {
        "label": "BankObligationAdmin",
        "kind": 6,
        "importPath": "server.bank_obligations.admin",
        "description": "server.bank_obligations.admin",
        "peekOfCode": "class BankObligationAdmin(admin.ModelAdmin):\n    list_display = ('obligation_number', 'obligation_type', 'bank', 'principal_amount', \n                   'interest_rate', 'payment_frequency', 'start_date', 'end_date', \n                   'remaining_balance', 'progress_percentage', 'is_active')\n    list_filter = ('obligation_type', 'payment_frequency', 'is_active', 'bank')\n    search_fields = ('obligation_number', 'bank__name', 'account_number', 'notes')\n    readonly_fields = ('obligation_number', 'created_by', 'created_at', 'updated_at', \n                       'remaining_balance', 'progress_percentage', 'next_payment_date')\n    date_hierarchy = 'start_date'\n    fieldsets = (",
        "detail": "server.bank_obligations.admin",
        "documentation": {}
    },
    {
        "label": "ObligationPaymentAdmin",
        "kind": 6,
        "importPath": "server.bank_obligations.admin",
        "description": "server.bank_obligations.admin",
        "peekOfCode": "class ObligationPaymentAdmin(admin.ModelAdmin):\n    list_display = ('obligation', 'payment_date', 'amount', 'principal_portion', \n                   'interest_portion', 'reference_number')\n    list_filter = ('payment_date', 'obligation__obligation_type')\n    search_fields = ('obligation__obligation_number', 'reference_number', 'notes')\n    readonly_fields = ('created_by', 'created_at')\n    date_hierarchy = 'payment_date'\n    fieldsets = (\n        (None, {'fields': ('obligation',)}),\n        (_('Payment Details'), {",
        "detail": "server.bank_obligations.admin",
        "documentation": {}
    },
    {
        "label": "BankObligationsConfig",
        "kind": 6,
        "importPath": "server.bank_obligations.apps",
        "description": "server.bank_obligations.apps",
        "peekOfCode": "class BankObligationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bank_obligations'",
        "detail": "server.bank_obligations.apps",
        "documentation": {}
    },
    {
        "label": "Bank",
        "kind": 6,
        "importPath": "server.bank_obligations.models",
        "description": "server.bank_obligations.models",
        "peekOfCode": "class Bank(models.Model):\n    name = models.CharField(max_length=100)\n    branch = models.CharField(max_length=100, blank=True)\n    swift_code = models.CharField(max_length=20, blank=True)\n    contact_person = models.CharField(max_length=100, blank=True)\n    phone = models.CharField(max_length=20, blank=True)\n    email = models.EmailField(blank=True)\n    address = models.TextField(blank=True)\n    def __str__(self):\n        return self.name",
        "detail": "server.bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "BankObligation",
        "kind": 6,
        "importPath": "server.bank_obligations.models",
        "description": "server.bank_obligations.models",
        "peekOfCode": "class BankObligation(models.Model):\n    \"\"\"Model for bank obligations such as loans, credit lines, and letters of credit.\"\"\"\n    OBLIGATION_TYPES = (\n        ('loan', _('Loan')),\n        ('credit_line', _('Credit Line')),\n        ('letter_of_credit', _('Letter of Credit')),\n    )\n    STATUS_CHOICES = (\n        ('created', _('Created')),\n        ('covered_with_papers', _('Covered with Papers')),",
        "detail": "server.bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "ObligationPayment",
        "kind": 6,
        "importPath": "server.bank_obligations.models",
        "description": "server.bank_obligations.models",
        "peekOfCode": "class ObligationPayment(models.Model):\n    \"\"\"Model to track payments made for bank obligations.\"\"\"\n    obligation = models.ForeignKey(\n        BankObligation,\n        on_delete=models.CASCADE,\n        related_name='payments',\n        verbose_name=_('obligation')\n    )\n    payment_date = models.DateField(_('payment date'))\n    amount = models.DecimalField(",
        "detail": "server.bank_obligations.models",
        "documentation": {}
    },
    {
        "label": "ObligationPaymentSerializer",
        "kind": 6,
        "importPath": "server.bank_obligations.serializers",
        "description": "server.bank_obligations.serializers",
        "peekOfCode": "class ObligationPaymentSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the ObligationPayment model.\"\"\"\n    class Meta:\n        model = ObligationPayment\n        fields = '__all__'\n        read_only_fields = ('created_by', 'created_at')\nclass BankObligationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the BankObligation model.\"\"\"\n    bank_name = serializers.StringRelatedField(source='bank.name', read_only=True)\n    payments = ObligationPaymentSerializer(many=True, read_only=True)",
        "detail": "server.bank_obligations.serializers",
        "documentation": {}
    },
    {
        "label": "BankObligationSerializer",
        "kind": 6,
        "importPath": "server.bank_obligations.serializers",
        "description": "server.bank_obligations.serializers",
        "peekOfCode": "class BankObligationSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the BankObligation model.\"\"\"\n    bank_name = serializers.StringRelatedField(source='bank.name', read_only=True)\n    payments = ObligationPaymentSerializer(many=True, read_only=True)\n    remaining_balance = serializers.DecimalField(max_digits=14, decimal_places=2, read_only=True)\n    progress_percentage = serializers.DecimalField(max_digits=5, decimal_places=2, read_only=True)\n    next_payment_date = serializers.DateField(read_only=True)\n    class Meta:\n        model = BankObligation\n        fields = '__all__'",
        "detail": "server.bank_obligations.serializers",
        "documentation": {}
    },
    {
        "label": "ObligationSummarySerializer",
        "kind": 6,
        "importPath": "server.bank_obligations.serializers",
        "description": "server.bank_obligations.serializers",
        "peekOfCode": "class ObligationSummarySerializer(serializers.Serializer):\n    \"\"\"Serializer for the obligation summary data.\"\"\"\n    total_obligations = serializers.DecimalField(max_digits=14, decimal_places=2)\n    total_remaining = serializers.DecimalField(max_digits=14, decimal_places=2)\n    total_paid = serializers.DecimalField(max_digits=14, decimal_places=2)\n    active_obligations_count = serializers.IntegerField()\n    by_type = serializers.DictField(child=serializers.DecimalField(max_digits=14, decimal_places=2))\n    by_bank = serializers.DictField(child=serializers.DecimalField(max_digits=14, decimal_places=2))\n    upcoming_payments = serializers.ListField(child=serializers.DictField())\nclass ObligationReportSerializer(serializers.Serializer):",
        "detail": "server.bank_obligations.serializers",
        "documentation": {}
    },
    {
        "label": "ObligationReportSerializer",
        "kind": 6,
        "importPath": "server.bank_obligations.serializers",
        "description": "server.bank_obligations.serializers",
        "peekOfCode": "class ObligationReportSerializer(serializers.Serializer):\n    \"\"\"Serializer for the obligation report data.\"\"\"\n    start_date = serializers.DateField()\n    end_date = serializers.DateField()\n    obligation_type = serializers.CharField(required=False)\n    bank = serializers.IntegerField(required=False)\n    is_active = serializers.BooleanField(required=False)\nclass PaymentScheduleSerializer(serializers.Serializer):\n    \"\"\"Serializer for the payment schedule data.\"\"\"\n    obligation_id = serializers.IntegerField()",
        "detail": "server.bank_obligations.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentScheduleSerializer",
        "kind": 6,
        "importPath": "server.bank_obligations.serializers",
        "description": "server.bank_obligations.serializers",
        "peekOfCode": "class PaymentScheduleSerializer(serializers.Serializer):\n    \"\"\"Serializer for the payment schedule data.\"\"\"\n    obligation_id = serializers.IntegerField()\n    months = serializers.IntegerField(default=12)  # Number of months to generate schedule for",
        "detail": "server.bank_obligations.serializers",
        "documentation": {}
    },
    {
        "label": "BankObligationsAPITestCase",
        "kind": 6,
        "importPath": "server.bank_obligations.tests",
        "description": "server.bank_obligations.tests",
        "peekOfCode": "class BankObligationsAPITestCase(APITestCase):\n    def setUp(self):\n        self.obligations_url = '/api/v1/bank-obligations/obligations/'\n        self.login_url = '/api/v1/accounts/token/'\n        self.user_data = {'email': 'testuser@example.com', 'password': 'testpassword'}\n        # Create a test user and get JWT token\n        User = get_user_model()\n        self.user = User.objects.create_user(**self.user_data)\n        response = self.client.post(self.login_url, self.user_data)\n        self.token = response.data['access']",
        "detail": "server.bank_obligations.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.bank_obligations.urls",
        "description": "server.bank_obligations.urls",
        "peekOfCode": "urlpatterns = [\n    # Bank Obligation endpoints\n    path('obligations/', views.BankObligationListCreateView.as_view(), name='obligation-list-create'),\n    path('obligations/<int:pk>/', views.BankObligationRetrieveUpdateDestroyView.as_view(), name='obligation-detail'),\n    # Obligation Payment endpoints\n    path('obligations/<int:obligation_id>/payments/', views.ObligationPaymentListCreateView.as_view(), name='obligation-payment-list-create'),\n    path('obligations/payments/<int:pk>/', views.ObligationPaymentRetrieveUpdateDestroyView.as_view(), name='obligation-payment-detail'),\n    # Dashboard and reporting endpoints\n    path('dashboard/summary/', views.ObligationSummaryView.as_view(), name='obligation-summary'),\n    path('reports/obligations/', views.ObligationReportView.as_view(), name='obligation-report'),",
        "detail": "server.bank_obligations.urls",
        "documentation": {}
    },
    {
        "label": "BankObligationListCreateView",
        "kind": 6,
        "importPath": "server.bank_obligations.views",
        "description": "server.bank_obligations.views",
        "peekOfCode": "class BankObligationListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of bank obligations or create new bank obligation.\"\"\"\n    queryset = BankObligation.objects.all()\n    serializer_class = BankObligationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['obligation_type', 'bank', 'is_active']\n    search_fields = ['obligation_number', 'bank__name', 'purpose', 'notes']\n    ordering_fields = ['start_date', 'end_date', 'principal_amount', 'created_at']\n    def perform_create(self, serializer):",
        "detail": "server.bank_obligations.views",
        "documentation": {}
    },
    {
        "label": "BankObligationRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.bank_obligations.views",
        "description": "server.bank_obligations.views",
        "peekOfCode": "class BankObligationRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete bank obligation.\"\"\"\n    queryset = BankObligation.objects.all()\n    serializer_class = BankObligationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Obligation Payment views\nclass ObligationPaymentListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of payments for a specific obligation or create new payment.\"\"\"\n    serializer_class = ObligationPaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "server.bank_obligations.views",
        "documentation": {}
    },
    {
        "label": "ObligationPaymentListCreateView",
        "kind": 6,
        "importPath": "server.bank_obligations.views",
        "description": "server.bank_obligations.views",
        "peekOfCode": "class ObligationPaymentListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of payments for a specific obligation or create new payment.\"\"\"\n    serializer_class = ObligationPaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        obligation_id = self.kwargs.get('obligation_id')\n        return ObligationPayment.objects.filter(obligation_id=obligation_id)\n    def perform_create(self, serializer):\n        obligation_id = self.kwargs.get('obligation_id')\n        obligation = BankObligation.objects.get(id=obligation_id)",
        "detail": "server.bank_obligations.views",
        "documentation": {}
    },
    {
        "label": "ObligationPaymentRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.bank_obligations.views",
        "description": "server.bank_obligations.views",
        "peekOfCode": "class ObligationPaymentRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete obligation payment.\"\"\"\n    queryset = ObligationPayment.objects.all()\n    serializer_class = ObligationPaymentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Dashboard and reporting views\nclass ObligationSummaryView(APIView):\n    \"\"\"API view to retrieve summary data for bank obligations dashboard.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):",
        "detail": "server.bank_obligations.views",
        "documentation": {}
    },
    {
        "label": "ObligationSummaryView",
        "kind": 6,
        "importPath": "server.bank_obligations.views",
        "description": "server.bank_obligations.views",
        "peekOfCode": "class ObligationSummaryView(APIView):\n    \"\"\"API view to retrieve summary data for bank obligations dashboard.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        # Get summary data\n        total_obligations = BankObligation.objects.aggregate(total=Sum('principal_amount'))['total'] or 0\n        # Calculate total paid and remaining\n        total_paid = ObligationPayment.objects.aggregate(total=Sum('amount'))['total'] or 0\n        total_remaining = total_obligations - total_paid\n        # Count active obligations",
        "detail": "server.bank_obligations.views",
        "documentation": {}
    },
    {
        "label": "ObligationReportView",
        "kind": 6,
        "importPath": "server.bank_obligations.views",
        "description": "server.bank_obligations.views",
        "peekOfCode": "class ObligationReportView(APIView):\n    \"\"\"API view to generate reports for bank obligations.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = ObligationReportSerializer(data=request.data)\n        if serializer.is_valid():\n            start_date = serializer.validated_data['start_date']\n            end_date = serializer.validated_data['end_date']\n            obligation_type = serializer.validated_data.get('obligation_type')\n            bank = serializer.validated_data.get('bank')",
        "detail": "server.bank_obligations.views",
        "documentation": {}
    },
    {
        "label": "PaymentScheduleView",
        "kind": 6,
        "importPath": "server.bank_obligations.views",
        "description": "server.bank_obligations.views",
        "peekOfCode": "class PaymentScheduleView(APIView):\n    \"\"\"API view to generate payment schedule for a bank obligation.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = PaymentScheduleSerializer(data=request.data)\n        if serializer.is_valid():\n            obligation_id = serializer.validated_data['obligation_id']\n            months = serializer.validated_data.get('months', 12)\n            try:\n                obligation = BankObligation.objects.get(id=obligation_id)",
        "detail": "server.bank_obligations.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.cash_transactions.migrations.0001_initial",
        "description": "server.cash_transactions.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CashAccount',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "server.cash_transactions.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "SubcategoryInline",
        "kind": 6,
        "importPath": "server.cash_transactions.admin",
        "description": "server.cash_transactions.admin",
        "peekOfCode": "class SubcategoryInline(admin.TabularInline):\n    model = TransactionCategory\n    extra = 0\n    fields = ('name', 'arabic_name', 'is_active')\n    fk_name = 'parent'\n    verbose_name = _('Subcategory')\n    verbose_name_plural = _('Subcategories')\n@admin.register(TransactionCategory)\nclass TransactionCategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'arabic_name', 'category_type', 'parent', 'full_path', 'is_active')",
        "detail": "server.cash_transactions.admin",
        "documentation": {}
    },
    {
        "label": "TransactionCategoryAdmin",
        "kind": 6,
        "importPath": "server.cash_transactions.admin",
        "description": "server.cash_transactions.admin",
        "peekOfCode": "class TransactionCategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'arabic_name', 'category_type', 'parent', 'full_path', 'is_active')\n    list_filter = ('category_type', 'is_active', 'parent')\n    search_fields = ('name', 'arabic_name', 'description')\n    fieldsets = (\n        (None, {'fields': ('name', 'arabic_name', 'category_type', 'is_active')}),\n        (_('Hierarchy'), {'fields': ('parent',)}),\n        (_('Additional Information'), {'fields': ('description',)}),\n    )\n    inlines = [SubcategoryInline]",
        "detail": "server.cash_transactions.admin",
        "documentation": {}
    },
    {
        "label": "CashAccountTransactionInline",
        "kind": 6,
        "importPath": "server.cash_transactions.admin",
        "description": "server.cash_transactions.admin",
        "peekOfCode": "class CashAccountTransactionInline(admin.TabularInline):\n    model = CashAccountTransaction\n    extra = 0\n    fields = ('account', 'amount', 'notes')\n    can_delete = False\n    show_change_link = True\n    max_num = 5\n@admin.register(CashTransaction)\nclass CashTransactionAdmin(admin.ModelAdmin):\n    list_display = ('reference_number', 'transaction_type', 'category', 'amount', ",
        "detail": "server.cash_transactions.admin",
        "documentation": {}
    },
    {
        "label": "CashTransactionAdmin",
        "kind": 6,
        "importPath": "server.cash_transactions.admin",
        "description": "server.cash_transactions.admin",
        "peekOfCode": "class CashTransactionAdmin(admin.ModelAdmin):\n    list_display = ('reference_number', 'transaction_type', 'category', 'amount', \n                   'transaction_date', 'created_by')\n    list_filter = ('transaction_type', 'transaction_date', 'category')\n    search_fields = ('reference_number', 'description', 'category__name')\n    readonly_fields = ('reference_number', 'created_by', 'created_at', 'updated_at')\n    date_hierarchy = 'transaction_date'\n    fieldsets = (\n        (None, {'fields': ('reference_number', 'transaction_type', 'category')}),\n        (_('Transaction Details'), {'fields': ('amount', 'transaction_date', 'description')}),",
        "detail": "server.cash_transactions.admin",
        "documentation": {}
    },
    {
        "label": "AccountTransactionInline",
        "kind": 6,
        "importPath": "server.cash_transactions.admin",
        "description": "server.cash_transactions.admin",
        "peekOfCode": "class AccountTransactionInline(admin.TabularInline):\n    model = CashAccountTransaction\n    extra = 0\n    fields = ('transaction', 'amount', 'notes')\n    can_delete = False\n    show_change_link = True\n    max_num = 10\n@admin.register(CashAccount)\nclass CashAccountAdmin(admin.ModelAdmin):\n    list_display = ('name', 'arabic_name', 'initial_balance', 'current_balance', 'is_active')",
        "detail": "server.cash_transactions.admin",
        "documentation": {}
    },
    {
        "label": "CashAccountAdmin",
        "kind": 6,
        "importPath": "server.cash_transactions.admin",
        "description": "server.cash_transactions.admin",
        "peekOfCode": "class CashAccountAdmin(admin.ModelAdmin):\n    list_display = ('name', 'arabic_name', 'initial_balance', 'current_balance', 'is_active')\n    list_filter = ('is_active',)\n    search_fields = ('name', 'arabic_name', 'description')\n    readonly_fields = ('current_balance', 'created_at', 'updated_at')\n    fieldsets = (\n        (None, {'fields': ('name', 'arabic_name', 'is_active')}),\n        (_('Financial Information'), {'fields': ('initial_balance', 'current_balance')}),\n        (_('Additional Information'), {'fields': ('description',)}),\n        (_('System Information'), {'fields': ('created_at', 'updated_at')}),",
        "detail": "server.cash_transactions.admin",
        "documentation": {}
    },
    {
        "label": "CashAccountTransactionAdmin",
        "kind": 6,
        "importPath": "server.cash_transactions.admin",
        "description": "server.cash_transactions.admin",
        "peekOfCode": "class CashAccountTransactionAdmin(admin.ModelAdmin):\n    list_display = ('account', 'transaction', 'amount', 'created_at')\n    list_filter = ('account', 'transaction__transaction_type', 'created_at')\n    search_fields = ('account__name', 'transaction__reference_number', 'notes')\n    readonly_fields = ('created_at',)\n    date_hierarchy = 'created_at'\n    fieldsets = (\n        (None, {'fields': ('account', 'transaction')}),\n        (_('Transaction Details'), {'fields': ('amount', 'notes')}),\n        (_('System Information'), {'fields': ('created_at',)}),",
        "detail": "server.cash_transactions.admin",
        "documentation": {}
    },
    {
        "label": "CashTransactionsConfig",
        "kind": 6,
        "importPath": "server.cash_transactions.apps",
        "description": "server.cash_transactions.apps",
        "peekOfCode": "class CashTransactionsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'cash_transactions'",
        "detail": "server.cash_transactions.apps",
        "documentation": {}
    },
    {
        "label": "TransactionCategory",
        "kind": 6,
        "importPath": "server.cash_transactions.models",
        "description": "server.cash_transactions.models",
        "peekOfCode": "class TransactionCategory(models.Model):\n    \"\"\"Model for categorizing cash transactions.\"\"\"\n    CATEGORY_TYPES = (\n        ('income', _('Income')),\n        ('expense', _('Expense')),\n    )\n    name = models.CharField(_('category name'), max_length=100)\n    arabic_name = models.CharField(_('category name (Arabic)'), max_length=100)\n    category_type = models.CharField(_('category type'), max_length=10, choices=CATEGORY_TYPES)\n    description = models.TextField(_('description'), blank=True)",
        "detail": "server.cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashTransaction",
        "kind": 6,
        "importPath": "server.cash_transactions.models",
        "description": "server.cash_transactions.models",
        "peekOfCode": "class CashTransaction(models.Model):\n    \"\"\"Model for cash transactions (income and expenses).\"\"\"\n    TRANSACTION_TYPES = (\n        ('income', _('Income')),\n        ('expense', _('Expense')),\n    )\n    # Auto-generate reference number\n    def generate_reference_number():\n        today = datetime.date.today()\n        year = today.year",
        "detail": "server.cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashAccount",
        "kind": 6,
        "importPath": "server.cash_transactions.models",
        "description": "server.cash_transactions.models",
        "peekOfCode": "class CashAccount(models.Model):\n    \"\"\"Model for cash accounts (e.g., petty cash, cash register).\"\"\"\n    name = models.CharField(_('account name'), max_length=100)\n    arabic_name = models.CharField(_('account name (Arabic)'), max_length=100)\n    description = models.TextField(_('description'), blank=True)\n    initial_balance = models.DecimalField(\n        _('initial balance'),\n        max_digits=14,\n        decimal_places=2,\n        default=0",
        "detail": "server.cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "CashAccountTransaction",
        "kind": 6,
        "importPath": "server.cash_transactions.models",
        "description": "server.cash_transactions.models",
        "peekOfCode": "class CashAccountTransaction(models.Model):\n    \"\"\"Model to link cash transactions to specific cash accounts.\"\"\"\n    account = models.ForeignKey(\n        CashAccount,\n        on_delete=models.CASCADE,\n        related_name='account_transactions',\n        verbose_name=_('cash account')\n    )\n    transaction = models.ForeignKey(\n        CashTransaction,",
        "detail": "server.cash_transactions.models",
        "documentation": {}
    },
    {
        "label": "TransactionCategorySerializer",
        "kind": 6,
        "importPath": "server.cash_transactions.serializers",
        "description": "server.cash_transactions.serializers",
        "peekOfCode": "class TransactionCategorySerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the TransactionCategory model.\"\"\"\n    subcategories = serializers.SerializerMethodField()\n    class Meta:\n        model = TransactionCategory\n        fields = '__all__'\n        read_only_fields = ('created_at', 'updated_at')\n    def get_subcategories(self, obj):\n        \"\"\"Get all subcategories for this category.\"\"\"\n        subcategories = TransactionCategory.objects.filter(parent=obj)",
        "detail": "server.cash_transactions.serializers",
        "documentation": {}
    },
    {
        "label": "CashTransactionSerializer",
        "kind": 6,
        "importPath": "server.cash_transactions.serializers",
        "description": "server.cash_transactions.serializers",
        "peekOfCode": "class CashTransactionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the CashTransaction model.\"\"\"\n    category_name = serializers.StringRelatedField(source='category.name', read_only=True)\n    created_by_name = serializers.StringRelatedField(source='created_by.username', read_only=True)\n    class Meta:\n        model = CashTransaction\n        fields = '__all__'\n        read_only_fields = ('reference_number', 'created_by', 'created_at', 'updated_at')\n    def validate(self, data):\n        \"\"\"",
        "detail": "server.cash_transactions.serializers",
        "documentation": {}
    },
    {
        "label": "CashAccountTransactionSerializer",
        "kind": 6,
        "importPath": "server.cash_transactions.serializers",
        "description": "server.cash_transactions.serializers",
        "peekOfCode": "class CashAccountTransactionSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the CashAccountTransaction model.\"\"\"\n    transaction_details = CashTransactionSerializer(source='transaction', read_only=True)\n    class Meta:\n        model = CashAccountTransaction\n        fields = '__all__'\n        read_only_fields = ('created_at',)\nclass CashAccountSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the CashAccount model.\"\"\"\n    current_balance = serializers.DecimalField(max_digits=14, decimal_places=2, read_only=True)",
        "detail": "server.cash_transactions.serializers",
        "documentation": {}
    },
    {
        "label": "CashAccountSerializer",
        "kind": 6,
        "importPath": "server.cash_transactions.serializers",
        "description": "server.cash_transactions.serializers",
        "peekOfCode": "class CashAccountSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the CashAccount model.\"\"\"\n    current_balance = serializers.DecimalField(max_digits=14, decimal_places=2, read_only=True)\n    account_transactions = CashAccountTransactionSerializer(many=True, read_only=True)\n    class Meta:\n        model = CashAccount\n        fields = '__all__'\n        read_only_fields = ('created_at', 'updated_at', 'current_balance')\nclass TransactionSummarySerializer(serializers.Serializer):\n    \"\"\"Serializer for the transaction summary data.\"\"\"",
        "detail": "server.cash_transactions.serializers",
        "documentation": {}
    },
    {
        "label": "TransactionSummarySerializer",
        "kind": 6,
        "importPath": "server.cash_transactions.serializers",
        "description": "server.cash_transactions.serializers",
        "peekOfCode": "class TransactionSummarySerializer(serializers.Serializer):\n    \"\"\"Serializer for the transaction summary data.\"\"\"\n    total_income = serializers.DecimalField(max_digits=14, decimal_places=2)\n    total_expenses = serializers.DecimalField(max_digits=14, decimal_places=2)\n    net_cash_flow = serializers.DecimalField(max_digits=14, decimal_places=2)\n    income_by_category = serializers.DictField(child=serializers.DecimalField(max_digits=14, decimal_places=2))\n    expenses_by_category = serializers.DictField(child=serializers.DecimalField(max_digits=14, decimal_places=2))\n    recent_transactions = CashTransactionSerializer(many=True)\nclass TransactionReportSerializer(serializers.Serializer):\n    \"\"\"Serializer for the transaction report data.\"\"\"",
        "detail": "server.cash_transactions.serializers",
        "documentation": {}
    },
    {
        "label": "TransactionReportSerializer",
        "kind": 6,
        "importPath": "server.cash_transactions.serializers",
        "description": "server.cash_transactions.serializers",
        "peekOfCode": "class TransactionReportSerializer(serializers.Serializer):\n    \"\"\"Serializer for the transaction report data.\"\"\"\n    start_date = serializers.DateField()\n    end_date = serializers.DateField()\n    transaction_type = serializers.CharField(required=False)\n    category = serializers.IntegerField(required=False)\n    account = serializers.IntegerField(required=False)\nclass CashFlowSerializer(serializers.Serializer):\n    \"\"\"Serializer for the cash flow data.\"\"\"\n    period = serializers.CharField()  # 'daily', 'weekly', 'monthly', 'yearly'",
        "detail": "server.cash_transactions.serializers",
        "documentation": {}
    },
    {
        "label": "CashFlowSerializer",
        "kind": 6,
        "importPath": "server.cash_transactions.serializers",
        "description": "server.cash_transactions.serializers",
        "peekOfCode": "class CashFlowSerializer(serializers.Serializer):\n    \"\"\"Serializer for the cash flow data.\"\"\"\n    period = serializers.CharField()  # 'daily', 'weekly', 'monthly', 'yearly'\n    start_date = serializers.DateField()\n    end_date = serializers.DateField()\n    account = serializers.IntegerField(required=False)",
        "detail": "server.cash_transactions.serializers",
        "documentation": {}
    },
    {
        "label": "CashTransactionsAPITestCase",
        "kind": 6,
        "importPath": "server.cash_transactions.tests",
        "description": "server.cash_transactions.tests",
        "peekOfCode": "class CashTransactionsAPITestCase(APITestCase):\n    def setUp(self):\n        self.transactions_url = '/api/v1/cash-transactions/transactions/'\n        self.login_url = '/api/v1/accounts/token/'\n        self.user_data = {'email': 'testuser@example.com', 'password': 'testpassword'}\n        # Create a test user and get JWT token\n        User = get_user_model()\n        self.user = User.objects.create_user(**self.user_data)\n        response = self.client.post(self.login_url, self.user_data)\n        self.token = response.data['access']",
        "detail": "server.cash_transactions.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.cash_transactions.urls",
        "description": "server.cash_transactions.urls",
        "peekOfCode": "urlpatterns = [\n    # Transaction Category endpoints\n    path('categories/', views.TransactionCategoryListCreateView.as_view(), name='category-list-create'),\n    path('categories/<int:pk>/', views.TransactionCategoryRetrieveUpdateDestroyView.as_view(), name='category-detail'),\n    # Cash Transaction endpoints\n    path('transactions/', views.CashTransactionListCreateView.as_view(), name='transaction-list-create'),\n    path('transactions/<int:pk>/', views.CashTransactionRetrieveUpdateDestroyView.as_view(), name='transaction-detail'),\n    # Cash Account endpoints\n    path('accounts/', views.CashAccountListCreateView.as_view(), name='account-list-create'),\n    path('accounts/<int:pk>/', views.CashAccountRetrieveUpdateDestroyView.as_view(), name='account-detail'),",
        "detail": "server.cash_transactions.urls",
        "documentation": {}
    },
    {
        "label": "TransactionCategoryListCreateView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class TransactionCategoryListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of transaction categories or create new category.\"\"\"\n    serializer_class = TransactionCategorySerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['category_type', 'is_active', 'parent']\n    search_fields = ['name', 'arabic_name', 'description']\n    ordering_fields = ['name', 'category_type', 'created_at']\n    def get_queryset(self):\n        # Only return top-level categories (no parent) by default",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "TransactionCategoryRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class TransactionCategoryRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete transaction category.\"\"\"\n    queryset = TransactionCategory.objects.all()\n    serializer_class = TransactionCategorySerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Cash Transaction views\nclass CashTransactionListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of cash transactions or create new transaction.\"\"\"\n    queryset = CashTransaction.objects.all()\n    serializer_class = CashTransactionSerializer",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "CashTransactionListCreateView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class CashTransactionListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of cash transactions or create new transaction.\"\"\"\n    queryset = CashTransaction.objects.all()\n    serializer_class = CashTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['transaction_type', 'category', 'transaction_date']\n    search_fields = ['reference_number', 'description']\n    ordering_fields = ['transaction_date', 'amount', 'created_at']\n    def perform_create(self, serializer):",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "CashTransactionRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class CashTransactionRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete cash transaction.\"\"\"\n    queryset = CashTransaction.objects.all()\n    serializer_class = CashTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Cash Account views\nclass CashAccountListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of cash accounts or create new account.\"\"\"\n    queryset = CashAccount.objects.all()\n    serializer_class = CashAccountSerializer",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "CashAccountListCreateView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class CashAccountListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of cash accounts or create new account.\"\"\"\n    queryset = CashAccount.objects.all()\n    serializer_class = CashAccountSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['is_active']\n    search_fields = ['name', 'arabic_name', 'description']\n    ordering_fields = ['name', 'created_at']\nclass CashAccountRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "CashAccountRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class CashAccountRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete cash account.\"\"\"\n    queryset = CashAccount.objects.all()\n    serializer_class = CashAccountSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Cash Account Transaction views\nclass CashAccountTransactionListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of transactions for a specific account or create new transaction.\"\"\"\n    serializer_class = CashAccountTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "CashAccountTransactionListCreateView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class CashAccountTransactionListCreateView(generics.ListCreateAPIView):\n    \"\"\"API view to retrieve list of transactions for a specific account or create new transaction.\"\"\"\n    serializer_class = CashAccountTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        account_id = self.kwargs.get('account_id')\n        return CashAccountTransaction.objects.filter(account_id=account_id)\nclass CashAccountTransactionRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete cash account transaction.\"\"\"\n    queryset = CashAccountTransaction.objects.all()",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "CashAccountTransactionRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class CashAccountTransactionRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"API view to retrieve, update or delete cash account transaction.\"\"\"\n    queryset = CashAccountTransaction.objects.all()\n    serializer_class = CashAccountTransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n# Dashboard and reporting views\nclass TransactionSummaryView(APIView):\n    \"\"\"API view to retrieve summary data for cash transactions dashboard.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "TransactionSummaryView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class TransactionSummaryView(APIView):\n    \"\"\"API view to retrieve summary data for cash transactions dashboard.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request):\n        # Get query parameters for date range\n        start_date = request.query_params.get('start_date', None)\n        end_date = request.query_params.get('end_date', None)\n        # Default to current month if no dates provided\n        if not start_date or not end_date:\n            today = timezone.now().date()",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "TransactionReportView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class TransactionReportView(APIView):\n    \"\"\"API view to generate reports for cash transactions.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = TransactionReportSerializer(data=request.data)\n        if serializer.is_valid():\n            start_date = serializer.validated_data['start_date']\n            end_date = serializer.validated_data['end_date']\n            transaction_type = serializer.validated_data.get('transaction_type')\n            category = serializer.validated_data.get('category')",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "CashFlowView",
        "kind": 6,
        "importPath": "server.cash_transactions.views",
        "description": "server.cash_transactions.views",
        "peekOfCode": "class CashFlowView(APIView):\n    \"\"\"API view to generate cash flow data over time.\"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request):\n        serializer = CashFlowSerializer(data=request.data)\n        if serializer.is_valid():\n            period = serializer.validated_data['period']\n            start_date = serializer.validated_data['start_date']\n            end_date = serializer.validated_data['end_date']\n            account_id = serializer.validated_data.get('account')",
        "detail": "server.cash_transactions.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.finance_calendar.migrations.0001_initial",
        "description": "server.finance_calendar.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('bank_obligations', '0003_alter_bankobligation_end_date_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('accounts_payable', '0002_supplier_pdf_file_alter_accountpayable_status'),\n        ('accounts_receivable', '0002_bank_pdf_file_client_pdf_file_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(",
        "detail": "server.finance_calendar.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CalendarEventAdmin",
        "kind": 6,
        "importPath": "server.finance_calendar.admin",
        "description": "server.finance_calendar.admin",
        "peekOfCode": "class CalendarEventAdmin(admin.ModelAdmin):\n    list_display = ('title', 'event_type', 'start_date', 'end_date', 'all_day')\n    list_filter = ('event_type', 'all_day', 'start_date')\n    search_fields = ('title', 'description')\n    date_hierarchy = 'start_date'\n    readonly_fields = ('color',)\n    fieldsets = (\n        (None, {\n            'fields': ('title', 'description', 'event_type', 'color')\n        }),",
        "detail": "server.finance_calendar.admin",
        "documentation": {}
    },
    {
        "label": "FinanceCalendarConfig",
        "kind": 6,
        "importPath": "server.finance_calendar.apps",
        "description": "server.finance_calendar.apps",
        "peekOfCode": "class FinanceCalendarConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'finance_calendar'\n    verbose_name = _('Finance Calendar')\n    def ready(self):\n        # Import signal handlers\n        import finance_calendar.signals",
        "detail": "server.finance_calendar.apps",
        "documentation": {}
    },
    {
        "label": "CalendarEvent",
        "kind": 6,
        "importPath": "server.finance_calendar.models",
        "description": "server.finance_calendar.models",
        "peekOfCode": "class CalendarEvent(models.Model):\n    \"\"\"Model for calendar events that can be displayed in the calendar.\"\"\"\n    EVENT_TYPES = (\n        ('receivable', _('Account Receivable')),\n        ('payable', _('Account Payable')),\n        ('obligation', _('Bank Obligation')),\n        ('reminder', _('Payment Reminder')),\n        ('custom', _('Custom Event')),\n    )\n    EVENT_COLORS = {",
        "detail": "server.finance_calendar.models",
        "documentation": {}
    },
    {
        "label": "CalendarEventSerializer",
        "kind": 6,
        "importPath": "server.finance_calendar.serializers",
        "description": "server.finance_calendar.serializers",
        "peekOfCode": "class CalendarEventSerializer(serializers.ModelSerializer):\n    color = serializers.CharField(read_only=True)\n    class Meta:\n        model = CalendarEvent\n        fields = [\n            'id', 'title', 'description', 'event_type', 'start_date', 'end_date',\n            'all_day', 'color', 'receivable', 'payable', 'obligation',\n            'google_calendar_id', 'google_event_id'\n        ]\n        read_only_fields = ['color']",
        "detail": "server.finance_calendar.serializers",
        "documentation": {}
    },
    {
        "label": "create_receivable_event",
        "kind": 2,
        "importPath": "server.finance_calendar.signals",
        "description": "server.finance_calendar.signals",
        "peekOfCode": "def create_receivable_event(sender, instance, created, **kwargs):\n    \"\"\"Create or update calendar event when a receivable is created or updated.\"\"\"\n    if instance.status in ['active', 'overdue']:\n        # Check if event already exists\n        event = CalendarEvent.objects.filter(\n            event_type='receivable',\n            receivable=instance\n        ).first()\n        if event:\n            # Update existing event",
        "detail": "server.finance_calendar.signals",
        "documentation": {}
    },
    {
        "label": "create_payable_event",
        "kind": 2,
        "importPath": "server.finance_calendar.signals",
        "description": "server.finance_calendar.signals",
        "peekOfCode": "def create_payable_event(sender, instance, created, **kwargs):\n    \"\"\"Create or update calendar event when a payable is created or updated.\"\"\"\n    if instance.status in ['scheduled', 'in_process']:\n        # Check if event already exists\n        event = CalendarEvent.objects.filter(\n            event_type='payable',\n            payable=instance\n        ).first()\n        if event:\n            # Update existing event",
        "detail": "server.finance_calendar.signals",
        "documentation": {}
    },
    {
        "label": "create_obligation_event",
        "kind": 2,
        "importPath": "server.finance_calendar.signals",
        "description": "server.finance_calendar.signals",
        "peekOfCode": "def create_obligation_event(sender, instance, created, **kwargs):\n    \"\"\"Create or update calendar event when an obligation is created or updated.\"\"\"\n    # Check if event already exists\n    event = CalendarEvent.objects.filter(\n        event_type='obligation',\n        obligation=instance\n    ).first()\n    if event:\n        # Update existing event\n        event.title = f\"Obligation: {instance.bank.name} - {instance.principal_amount}\"",
        "detail": "server.finance_calendar.signals",
        "documentation": {}
    },
    {
        "label": "create_reminder_event",
        "kind": 2,
        "importPath": "server.finance_calendar.signals",
        "description": "server.finance_calendar.signals",
        "peekOfCode": "def create_reminder_event(sender, instance, created, **kwargs):\n    \"\"\"Create or update calendar event when a payment reminder is created or updated.\"\"\"\n    # Check if event already exists\n    event = CalendarEvent.objects.filter(\n        event_type='reminder',\n        description__contains=f\"Reminder ID: {instance.id}\"\n    ).first()\n    if event:\n        # Update existing event\n        event.start_date = instance.reminder_date",
        "detail": "server.finance_calendar.signals",
        "documentation": {}
    },
    {
        "label": "delete_receivable_event",
        "kind": 2,
        "importPath": "server.finance_calendar.signals",
        "description": "server.finance_calendar.signals",
        "peekOfCode": "def delete_receivable_event(sender, instance, **kwargs):\n    \"\"\"Delete calendar event when a receivable is deleted.\"\"\"\n    CalendarEvent.objects.filter(\n        event_type='receivable',\n        receivable=instance\n    ).delete()\n@receiver(post_delete, sender=AccountPayable)\ndef delete_payable_event(sender, instance, **kwargs):\n    \"\"\"Delete calendar event when a payable is deleted.\"\"\"\n    CalendarEvent.objects.filter(",
        "detail": "server.finance_calendar.signals",
        "documentation": {}
    },
    {
        "label": "delete_payable_event",
        "kind": 2,
        "importPath": "server.finance_calendar.signals",
        "description": "server.finance_calendar.signals",
        "peekOfCode": "def delete_payable_event(sender, instance, **kwargs):\n    \"\"\"Delete calendar event when a payable is deleted.\"\"\"\n    CalendarEvent.objects.filter(\n        event_type='payable',\n        payable=instance\n    ).delete()\n@receiver(post_delete, sender=BankObligation)\ndef delete_obligation_event(sender, instance, **kwargs):\n    \"\"\"Delete calendar event when an obligation is deleted.\"\"\"\n    CalendarEvent.objects.filter(",
        "detail": "server.finance_calendar.signals",
        "documentation": {}
    },
    {
        "label": "delete_obligation_event",
        "kind": 2,
        "importPath": "server.finance_calendar.signals",
        "description": "server.finance_calendar.signals",
        "peekOfCode": "def delete_obligation_event(sender, instance, **kwargs):\n    \"\"\"Delete calendar event when an obligation is deleted.\"\"\"\n    CalendarEvent.objects.filter(\n        event_type='obligation',\n        obligation=instance\n    ).delete()\n@receiver(post_delete, sender=PaymentReminder)\ndef delete_reminder_event(sender, instance, **kwargs):\n    \"\"\"Delete calendar event when a payment reminder is deleted.\"\"\"\n    CalendarEvent.objects.filter(",
        "detail": "server.finance_calendar.signals",
        "documentation": {}
    },
    {
        "label": "delete_reminder_event",
        "kind": 2,
        "importPath": "server.finance_calendar.signals",
        "description": "server.finance_calendar.signals",
        "peekOfCode": "def delete_reminder_event(sender, instance, **kwargs):\n    \"\"\"Delete calendar event when a payment reminder is deleted.\"\"\"\n    CalendarEvent.objects.filter(\n        event_type='reminder',\n        description__contains=f\"Reminder ID: {instance.id}\"\n    ).delete()",
        "detail": "server.finance_calendar.signals",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.finance_calendar.urls",
        "description": "server.finance_calendar.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'events', CalendarEventViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "server.finance_calendar.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.finance_calendar.urls",
        "description": "server.finance_calendar.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "server.finance_calendar.urls",
        "documentation": {}
    },
    {
        "label": "CalendarEventViewSet",
        "kind": 6,
        "importPath": "server.finance_calendar.views",
        "description": "server.finance_calendar.views",
        "peekOfCode": "class CalendarEventViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for calendar events.\n    \"\"\"\n    queryset = CalendarEvent.objects.all()\n    serializer_class = CalendarEventSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filterset_fields = ['event_type', 'all_day']\n    def get_queryset(self):\n        queryset = super().get_queryset()",
        "detail": "server.finance_calendar.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.finance_system.asgi",
        "description": "server.finance_system.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "server.finance_system.asgi",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env()\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY', default='django-insecure-0&t60$$f4+#tv6k2$^7&)%i9xig(6yk29m0j0clsp2uaii(3iq')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env('DEBUG', default=True)",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY', default='django-insecure-0&t60$$f4+#tv6k2$^7&)%i9xig(6yk29m0j0clsp2uaii(3iq')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env('DEBUG', default=True)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nINSTALLED_APPS = [",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "SECRET_KEY = env('SECRET_KEY', default='django-insecure-0&t60$$f4+#tv6k2$^7&)%i9xig(6yk29m0j0clsp2uaii(3iq')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env('DEBUG', default=True)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "DEBUG = env('DEBUG', default=True)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django_otp.middleware.OTPMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "ROOT_URLCONF = 'finance_system.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "WSGI_APPLICATION = 'finance_system.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': env.db('DATABASE_URL', default='sqlite:///db.sqlite3')\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "DATABASES = {\n    'default': env.db('DATABASE_URL', default='sqlite:///db.sqlite3')\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "LANGUAGE_CODE = env('LANGUAGE_CODE', default='ar')\nTIME_ZONE = env('TIME_ZONE', default='Asia/Riyadh')\nUSE_I18N = True\nUSE_TZ = True\nLANGUAGES = [\n    ('ar', 'Arabic'),\n    ('en', 'English'),\n]\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "TIME_ZONE = env('TIME_ZONE', default='Asia/Riyadh')\nUSE_I18N = True\nUSE_TZ = True\nLANGUAGES = [\n    ('ar', 'Arabic'),\n    ('en', 'English'),\n]\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nLANGUAGES = [\n    ('ar', 'Arabic'),\n    ('en', 'English'),\n]\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Static files (CSS, JavaScript, Images)",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "USE_TZ = True\nLANGUAGES = [\n    ('ar', 'Arabic'),\n    ('en', 'English'),\n]\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGES",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "LANGUAGES = [\n    ('ar', 'Arabic'),\n    ('en', 'English'),\n]\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "LOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Updated STATICFILES_STORAGE to STORAGES\nSTORAGES = {\n    \"staticfiles\": {",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Updated STATICFILES_STORAGE to STORAGES\nSTORAGES = {\n    \"staticfiles\": {\n        \"BACKEND\": \"django.contrib.staticfiles.storage.StaticFilesStorage\",\n    },\n}\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Updated STATICFILES_STORAGE to STORAGES\nSTORAGES = {\n    \"staticfiles\": {\n        \"BACKEND\": \"django.contrib.staticfiles.storage.StaticFilesStorage\",\n    },\n}\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "STORAGES",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "STORAGES = {\n    \"staticfiles\": {\n        \"BACKEND\": \"django.contrib.staticfiles.storage.StaticFilesStorage\",\n    },\n}\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'accounts.User'\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    'accounts.backends.EmailBackend',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'accounts.User'\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    'accounts.backends.EmailBackend',\n    'django.contrib.auth.backends.ModelBackend',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Custom user model\nAUTH_USER_MODEL = 'accounts.User'\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    'accounts.backends.EmailBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\n# Login URL\nLOGIN_URL = '/accounts/login/'",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'accounts.User'\n# Authentication settings\nAUTHENTICATION_BACKENDS = [\n    'accounts.backends.EmailBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\n# Login URL\nLOGIN_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/admin/'\n# REST Framework settings",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'accounts.backends.EmailBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\n# Login URL\nLOGIN_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/admin/'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "LOGIN_URL = '/accounts/login/'\nLOGIN_REDIRECT_URL = '/admin/'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/admin/'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20,",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': True,\n}\n# CORS settings\nCORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[\n    'http://localhost:3000',\n    'http://127.0.0.1:3000',\n])",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[\n    'http://localhost:3000',\n    'http://127.0.0.1:3000',\n])\n# Session settings\nSESSION_COOKIE_AGE = env.int('SESSION_COOKIE_AGE', default=1800)  # 30 minutes\nSESSION_SAVE_EVERY_REQUEST = True\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\n# Security settings\nSECURE_BROWSER_XSS_FILTER = True",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_AGE",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "SESSION_COOKIE_AGE = env.int('SESSION_COOKIE_AGE', default=1800)  # 30 minutes\nSESSION_SAVE_EVERY_REQUEST = True\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\n# Security settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\nCSRF_COOKIE_SECURE = not DEBUG\nSESSION_COOKIE_SECURE = not DEBUG",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_SAVE_EVERY_REQUEST",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "SESSION_SAVE_EVERY_REQUEST = True\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\n# Security settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\nCSRF_COOKIE_SECURE = not DEBUG\nSESSION_COOKIE_SECURE = not DEBUG",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_EXPIRE_AT_BROWSER_CLOSE",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "SESSION_EXPIRE_AT_BROWSER_CLOSE = True\n# Security settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\nCSRF_COOKIE_SECURE = not DEBUG\nSESSION_COOKIE_SECURE = not DEBUG",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_BROWSER_XSS_FILTER",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "SECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\nCSRF_COOKIE_SECURE = not DEBUG\nSESSION_COOKIE_SECURE = not DEBUG",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_CONTENT_TYPE_NOSNIFF",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "SECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\nCSRF_COOKIE_SECURE = not DEBUG\nSESSION_COOKIE_SECURE = not DEBUG",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "X_FRAME_OPTIONS = 'DENY'\nCSRF_COOKIE_SECURE = not DEBUG\nSESSION_COOKIE_SECURE = not DEBUG",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "CSRF_COOKIE_SECURE = not DEBUG\nSESSION_COOKIE_SECURE = not DEBUG",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "server.finance_system.settings",
        "description": "server.finance_system.settings",
        "peekOfCode": "SESSION_COOKIE_SECURE = not DEBUG",
        "detail": "server.finance_system.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "server.finance_system.urls",
        "description": "server.finance_system.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Financial Management System API\",\n        default_version='v1',\n        description=\"API for Financial Management System\",\n        terms_of_service=\"https://www.example.com/terms/\",\n        contact=openapi.Contact(email=\"osamaeldeghadey@gmail.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "server.finance_system.urls",
        "documentation": {}
    },
    {
        "label": "api_urlpatterns",
        "kind": 5,
        "importPath": "server.finance_system.urls",
        "description": "server.finance_system.urls",
        "peekOfCode": "api_urlpatterns = [\n    # API endpoints will be added here\n    path('accounts/', include('accounts.urls')),\n    path('accounts-receivable/', include('accounts_receivable.urls')),\n    path('accounts-payable/', include('accounts_payable.urls')),\n    path('bank-obligations/', include('bank_obligations.urls')),\n    path('cash-transactions/', include('cash_transactions.urls')),\n    path('calendar/', include('finance_calendar.urls')),\n]\nurlpatterns = [",
        "detail": "server.finance_system.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.finance_system.urls",
        "description": "server.finance_system.urls",
        "peekOfCode": "urlpatterns = [\n    # Home page\n    path('', views.index, name='index'),\n    path('admin/', admin.site.urls),\n    # Django authentication URLs (for admin login)\n    path('accounts/', include('django.contrib.auth.urls')),\n    # API endpoints\n    path('api/v1/', include(api_urlpatterns)),\n    # API documentation\n    path('api/docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),",
        "detail": "server.finance_system.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "server.finance_system.views",
        "description": "server.finance_system.views",
        "peekOfCode": "def index(request):\n    \"\"\"View for the home page.\"\"\"\n    return render(request, 'index.html')",
        "detail": "server.finance_system.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.finance_system.wsgi",
        "description": "server.finance_system.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "server.finance_system.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Add sample data to the database'\n    def handle(self, *args, **kwargs):\n        # Add sample users\n        user1 = User.objects.create_user(email='user1@example.com', password='password123')\n        user2 = User.objects.create_user(email='user2@example.com', password='password123')\n        # Add sample accounts payable\n        AccountPayable.objects.create(name='Supplier A', amount=1000, due_date='2025-05-01', user=user1)\n        AccountPayable.objects.create(name='Supplier B', amount=2000, due_date='2025-05-15', user=user2)\n        # Add sample accounts receivable",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "banks_data",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "banks_data = [\n    {'name': 'البنك الأهلي السعودي', 'arabic_name': 'البنك الأهلي السعودي', 'branch': 'الرياض', 'swift_code': 'NCBKSAJE', 'contact_person': 'عبدالله محمد', 'phone': '+966501234567', 'email': 'contact@alahli.com', 'address': 'الرياض، طريق الملك فهد'},\n    {'name': 'Riyad Bank', 'arabic_name': 'بنك الرياض', 'branch': 'جدة', 'swift_code': 'RIBLSARI', 'contact_person': 'سعد خالد', 'phone': '+966512345678', 'email': 'contact@riyadbank.com', 'address': 'جدة، شارع التحلية'},\n    {'name': 'Al Rajhi Bank', 'arabic_name': 'مصرف الراجحي', 'branch': 'الدمام', 'swift_code': 'RJHISARI', 'contact_person': 'محمد علي', 'phone': '+966523456789', 'email': 'contact@alrajhibank.com', 'address': 'الدمام، شارع الملك خالد'},\n]\nbanks = []\nfor bank_data in banks_data:\n    bank, created = Bank.objects.get_or_create(\n        name=bank_data['name'],\n        defaults={",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "banks",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "banks = []\nfor bank_data in banks_data:\n    bank, created = Bank.objects.get_or_create(\n        name=bank_data['name'],\n        defaults={\n            'arabic_name': bank_data['arabic_name'],\n            'branch': bank_data['branch'],\n            'swift_code': bank_data['swift_code'],\n            'contact_person': bank_data['contact_person'],\n            'phone': bank_data['phone'],",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "clients_data",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "clients_data = [\n    {'name': 'شركة الأفق للتجارة', 'arabic_name': 'شركة الأفق للتجارة', 'contact_person': 'أحمد محمد', 'email': 'ahmed@horizon.com', 'phone': '+966501234567', 'address': 'الرياض، حي العليا', 'tax_number': '300123456', 'credit_limit': 50000},\n    {'name': 'Alnoor Contracting', 'arabic_name': 'مؤسسة النور للمقاولات', 'contact_person': 'خالد عبدالله', 'email': 'khalid@alnoor.com', 'phone': '+966512345678', 'address': 'جدة، حي الروضة', 'tax_number': '300234567', 'credit_limit': 75000},\n    {'name': 'Creativity Tech', 'arabic_name': 'شركة الإبداع للتقنية', 'contact_person': 'سارة علي', 'email': 'sara@creativity.com', 'phone': '+966523456789', 'address': 'الدمام، حي الفيصلية', 'tax_number': '300345678', 'credit_limit': 100000},\n]\nclients = []\nfor client_data in clients_data:\n    client, created = Client.objects.get_or_create(\n        name=client_data['name'],\n        defaults={",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "clients",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "clients = []\nfor client_data in clients_data:\n    client, created = Client.objects.get_or_create(\n        name=client_data['name'],\n        defaults={\n            'arabic_name': client_data['arabic_name'],\n            'contact_person': client_data['contact_person'],\n            'email': client_data['email'],\n            'phone': client_data['phone'],\n            'address': client_data['address'],",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "suppliers_data",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "suppliers_data = [\n    {'name': 'شركة التوريدات العامة', 'arabic_name': 'شركة التوريدات العامة', 'contact_person': 'محمد سعيد', 'email': 'mohammed@supplies.com', 'phone': '+966534567890', 'address': 'الرياض، حي الملز', 'tax_number': '310123456', 'payment_terms': 30},\n    {'name': 'Supply Equipment Est.', 'arabic_name': 'مؤسسة الإمداد للتجهيزات', 'contact_person': 'فهد ناصر', 'email': 'fahad@supply.com', 'phone': '+966545678901', 'address': 'جدة، حي السلامة', 'tax_number': '310234567', 'payment_terms': 45},\n    {'name': 'Future Equipment Co.', 'arabic_name': 'شركة المستقبل للمعدات', 'contact_person': 'نورة سعد', 'email': 'noura@future.com', 'phone': '+966556789012', 'address': 'الدمام، حي الشاطئ', 'tax_number': '310345678', 'payment_terms': 60},\n]\nsuppliers = []\nfor supplier_data in suppliers_data:\n    supplier, created = Supplier.objects.get_or_create(\n        name=supplier_data['name'],\n        defaults={",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "suppliers",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "suppliers = []\nfor supplier_data in suppliers_data:\n    supplier, created = Supplier.objects.get_or_create(\n        name=supplier_data['name'],\n        defaults={\n            'arabic_name': supplier_data['arabic_name'],\n            'contact_person': supplier_data['contact_person'],\n            'email': supplier_data['email'],\n            'phone': supplier_data['phone'],\n            'address': supplier_data['address'],",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "cash_accounts_data",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "cash_accounts_data = [\n    {'name': 'Main Cash', 'arabic_name': 'الصندوق الرئيسي', 'initial_balance': Decimal('50000.00'), 'description': 'الصندوق الرئيسي للشركة'},\n    {'name': 'Petty Cash', 'arabic_name': 'حساب المصروفات اليومية', 'initial_balance': Decimal('5000.00'), 'description': 'حساب للمصروفات اليومية الصغيرة'},\n    {'name': 'Emergency Fund', 'arabic_name': 'حساب الطوارئ', 'initial_balance': Decimal('20000.00'), 'description': 'حساب احتياطي للطوارئ'},\n]\ncash_accounts = []\nfor account_data in cash_accounts_data:\n    account, created = CashAccount.objects.get_or_create(\n        name=account_data['name'],\n        defaults={",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "cash_accounts",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "cash_accounts = []\nfor account_data in cash_accounts_data:\n    account, created = CashAccount.objects.get_or_create(\n        name=account_data['name'],\n        defaults={\n            'arabic_name': account_data['arabic_name'],\n            'initial_balance': account_data['initial_balance'],\n            'description': account_data['description'],\n            'is_active': True\n        }",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "categories_data",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "categories_data = [\n    {'name': 'Salaries', 'arabic_name': 'رواتب', 'category_type': 'expense', 'description': 'مدفوعات الرواتب للموظفين'},\n    {'name': 'Rent', 'arabic_name': 'إيجارات', 'category_type': 'expense', 'description': 'إيجارات المكاتب والمستودعات'},\n    {'name': 'Sales', 'arabic_name': 'مبيعات', 'category_type': 'income', 'description': 'إيرادات من المبيعات'},\n    {'name': 'Consulting', 'arabic_name': 'استشارات', 'category_type': 'income', 'description': 'إيرادات من الخدمات الاستشارية'},\n    {'name': 'Utilities', 'arabic_name': 'مرافق', 'category_type': 'expense', 'description': 'فواتير الكهرباء والماء والاتصالات'},\n]\ncategories = []\nfor category_data in categories_data:\n    category, created = TransactionCategory.objects.get_or_create(",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "categories = []\nfor category_data in categories_data:\n    category, created = TransactionCategory.objects.get_or_create(\n        name=category_data['name'],\n        defaults={\n            'arabic_name': category_data['arabic_name'],\n            'category_type': category_data['category_type'],\n            'description': category_data['description'],\n            'is_active': True\n        }",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "obligation_types",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "obligation_types = ['loan', 'credit_line', 'letter_of_credit']\npayment_frequencies = ['monthly', 'quarterly', 'semi_annually', 'annually', 'lump_sum']\nfor i in range(3):\n    bank = random.choice(banks)\n    start_date = timezone.now() - timedelta(days=random.randint(30, 180))\n    end_date = start_date + timedelta(days=random.randint(180, 365))\n    principal_amount = Decimal(str(random.randint(100000, 500000)))\n    obligation_type = obligation_types[i % len(obligation_types)]\n    payment_frequency = random.choice(payment_frequencies)\n    total_payments = 12 if payment_frequency == 'monthly' else 4 if payment_frequency == 'quarterly' else 2 if payment_frequency == 'semi_annually' else 1",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "payment_frequencies",
        "kind": 5,
        "importPath": "server.add_sample_data",
        "description": "server.add_sample_data",
        "peekOfCode": "payment_frequencies = ['monthly', 'quarterly', 'semi_annually', 'annually', 'lump_sum']\nfor i in range(3):\n    bank = random.choice(banks)\n    start_date = timezone.now() - timedelta(days=random.randint(30, 180))\n    end_date = start_date + timedelta(days=random.randint(180, 365))\n    principal_amount = Decimal(str(random.randint(100000, 500000)))\n    obligation_type = obligation_types[i % len(obligation_types)]\n    payment_frequency = random.choice(payment_frequencies)\n    total_payments = 12 if payment_frequency == 'monthly' else 4 if payment_frequency == 'quarterly' else 2 if payment_frequency == 'semi_annually' else 1\n    payment_amount = principal_amount / total_payments",
        "detail": "server.add_sample_data",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.manage",
        "description": "server.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'finance_system.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "server.manage",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "User = get_user_model()\nprint(\"Starting to add sample data...\")\n# Get or create admin user\nadmin_user, created = User.objects.get_or_create(\n    email='admin@example.com',\n    defaults={\n        'first_name': 'Admin',\n        'last_name': 'User',\n        'is_staff': True,\n        'is_superuser': True,",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "banks_data",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "banks_data = [\n    {'name': 'Saudi National Bank', 'arabic_name': 'البنك الأهلي السعودي', 'branch': 'Riyadh Main Branch'},\n    {'name': 'Riyad Bank', 'arabic_name': 'بنك الرياض', 'branch': 'Jeddah Branch'},\n    {'name': 'Al Rajhi Bank', 'arabic_name': 'مصرف الراجحي', 'branch': 'Dammam Branch'},\n]\nbanks = []\nfor bank_data in banks_data:\n    bank, created = Bank.objects.get_or_create(\n        name=bank_data['name'],\n        defaults={",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "banks",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "banks = []\nfor bank_data in banks_data:\n    bank, created = Bank.objects.get_or_create(\n        name=bank_data['name'],\n        defaults={\n            'arabic_name': bank_data['arabic_name'],\n            'branch': bank_data['branch'],\n            'is_active': True\n        }\n    )",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "clients_data",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "clients_data = [\n    {'name': 'Horizon Trading Co.', 'arabic_name': 'شركة الأفق للتجارة', 'credit_limit': Decimal('100000.00')},\n    {'name': 'Alnoor Contracting', 'arabic_name': 'شركة النور للمقاولات', 'credit_limit': Decimal('150000.00')},\n    {'name': 'Creativity Tech', 'arabic_name': 'شركة الإبداع للتقنية', 'credit_limit': Decimal('80000.00')},\n]\nclients = []\nfor client_data in clients_data:\n    client, created = Client.objects.get_or_create(\n        name=client_data['name'],\n        defaults={",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "clients",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "clients = []\nfor client_data in clients_data:\n    client, created = Client.objects.get_or_create(\n        name=client_data['name'],\n        defaults={\n            'arabic_name': client_data['arabic_name'],\n            'credit_limit': client_data['credit_limit'],\n            'is_active': True,\n            'created_by': admin_user\n        }",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "suppliers_data",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "suppliers_data = [\n    {'name': 'General Supplies Co.', 'arabic_name': 'شركة التوريدات العامة', 'payment_terms': 30},\n    {'name': 'Supply Equipment Est.', 'arabic_name': 'مؤسسة توريد المعدات', 'payment_terms': 45},\n    {'name': 'Future Equipment Co.', 'arabic_name': 'شركة معدات المستقبل', 'payment_terms': 60},\n]\nsuppliers = []\nfor supplier_data in suppliers_data:\n    supplier, created = Supplier.objects.get_or_create(\n        name=supplier_data['name'],\n        defaults={",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "suppliers",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "suppliers = []\nfor supplier_data in suppliers_data:\n    supplier, created = Supplier.objects.get_or_create(\n        name=supplier_data['name'],\n        defaults={\n            'arabic_name': supplier_data['arabic_name'],\n            'payment_terms': supplier_data['payment_terms'],\n            'is_active': True,\n            'created_by': admin_user\n        }",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "cash_accounts_data",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "cash_accounts_data = [\n    {'name': 'Main Cash', 'arabic_name': 'الصندوق الرئيسي', 'initial_balance': Decimal('50000.00')},\n    {'name': 'Petty Cash', 'arabic_name': 'حساب المصروفات اليومية', 'initial_balance': Decimal('5000.00')},\n]\ncash_accounts = []\nfor account_data in cash_accounts_data:\n    account, created = CashAccount.objects.get_or_create(\n        name=account_data['name'],\n        defaults={\n            'arabic_name': account_data['arabic_name'],",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "cash_accounts",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "cash_accounts = []\nfor account_data in cash_accounts_data:\n    account, created = CashAccount.objects.get_or_create(\n        name=account_data['name'],\n        defaults={\n            'arabic_name': account_data['arabic_name'],\n            'initial_balance': account_data['initial_balance'],\n            'is_active': True\n        }\n    )",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "categories_data",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "categories_data = [\n    {'name': 'Salaries', 'arabic_name': 'رواتب', 'category_type': 'expense'},\n    {'name': 'Sales', 'arabic_name': 'مبيعات', 'category_type': 'income'},\n]\ncategories = []\nfor category_data in categories_data:\n    category, created = TransactionCategory.objects.get_or_create(\n        name=category_data['name'],\n        defaults={\n            'arabic_name': category_data['arabic_name'],",
        "detail": "server.simple_sample_data",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 5,
        "importPath": "server.simple_sample_data",
        "description": "server.simple_sample_data",
        "peekOfCode": "categories = []\nfor category_data in categories_data:\n    category, created = TransactionCategory.objects.get_or_create(\n        name=category_data['name'],\n        defaults={\n            'arabic_name': category_data['arabic_name'],\n            'category_type': category_data['category_type'],\n            'is_active': True\n        }\n    )",
        "detail": "server.simple_sample_data",
        "documentation": {}
    }
]